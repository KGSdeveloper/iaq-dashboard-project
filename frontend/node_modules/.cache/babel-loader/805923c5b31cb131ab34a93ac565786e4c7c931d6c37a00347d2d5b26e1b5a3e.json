{"ast":null,"code":"import { IAQ_LEVELS } from '../utils/constants.js';\nclass IAQCalculator {\n  // Calculate IAQ Index based on multiple sensor values\n  calculateIAQIndex(sensorData) {\n    const weights = {\n      PM25: 0.25,\n      CO2: 0.20,\n      TEMPERATURE: 0.15,\n      HUMIDITY: 0.15,\n      TVOC: 0.25\n    };\n    let totalScore = 0;\n    let totalWeight = 0;\n\n    // PM2.5 scoring (lower is better)\n    if (sensorData.PM25 !== undefined) {\n      const pm25Score = this.calculatePM25Score(sensorData.PM25);\n      totalScore += pm25Score * weights.PM25;\n      totalWeight += weights.PM25;\n    }\n\n    // CO2 scoring (lower is better)\n    if (sensorData.CO2 !== undefined) {\n      const co2Score = this.calculateCO2Score(sensorData.CO2);\n      totalScore += co2Score * weights.CO2;\n      totalWeight += weights.CO2;\n    }\n\n    // Temperature scoring (comfort range is best)\n    if (sensorData.TEMPERATURE !== undefined) {\n      const tempScore = this.calculateTemperatureScore(sensorData.TEMPERATURE);\n      totalScore += tempScore * weights.TEMPERATURE;\n      totalWeight += weights.TEMPERATURE;\n    }\n\n    // Humidity scoring (comfort range is best)\n    if (sensorData.HUMIDITY !== undefined) {\n      const humidityScore = this.calculateHumidityScore(sensorData.HUMIDITY);\n      totalScore += humidityScore * weights.HUMIDITY;\n      totalWeight += weights.HUMIDITY;\n    }\n\n    // TVOC scoring (lower is better)\n    if (sensorData.TVOC !== undefined) {\n      const tvocScore = this.calculateTVOCScore(sensorData.TVOC);\n      totalScore += tvocScore * weights.TVOC;\n      totalWeight += weights.TVOC;\n    }\n\n    // Calculate weighted average\n    const iaqIndex = totalWeight > 0 ? Math.round(totalScore / totalWeight) : 0;\n    return {\n      index: Math.max(0, Math.min(300, iaqIndex)),\n      // Clamp between 0-300\n      level: this.getIAQLevel(iaqIndex),\n      components: {\n        PM25: sensorData.PM25 ? this.calculatePM25Score(sensorData.PM25) : null,\n        CO2: sensorData.CO2 ? this.calculateCO2Score(sensorData.CO2) : null,\n        TEMPERATURE: sensorData.TEMPERATURE ? this.calculateTemperatureScore(sensorData.TEMPERATURE) : null,\n        HUMIDITY: sensorData.HUMIDITY ? this.calculateHumidityScore(sensorData.HUMIDITY) : null,\n        TVOC: sensorData.TVOC ? this.calculateTVOCScore(sensorData.TVOC) : null\n      }\n    };\n  }\n  calculatePM25Score(value) {\n    if (value <= 12) return 50;\n    if (value <= 35) return 100;\n    if (value <= 55) return 150;\n    if (value <= 150) return 200;\n    return 300;\n  }\n  calculateCO2Score(value) {\n    if (value <= 600) return 50;\n    if (value <= 1000) return 100;\n    if (value <= 1500) return 150;\n    if (value <= 2000) return 200;\n    return 300;\n  }\n  calculateTemperatureScore(value) {\n    // Optimal range: 20-26°C\n    if (value >= 20 && value <= 26) return 50;\n    if (value >= 18 && value <= 28) return 100;\n    if (value >= 16 && value <= 30) return 150;\n    return 200;\n  }\n  calculateHumidityScore(value) {\n    // Optimal range: 40-60%\n    if (value >= 40 && value <= 60) return 50;\n    if (value >= 30 && value <= 70) return 100;\n    if (value >= 25 && value <= 75) return 150;\n    return 200;\n  }\n  calculateTVOCScore(value) {\n    if (value <= 220) return 50;\n    if (value <= 660) return 100;\n    if (value <= 2220) return 150;\n    if (value <= 5500) return 200;\n    return 300;\n  }\n  getIAQLevel(index) {\n    for (const [key, level] of Object.entries(IAQ_LEVELS)) {\n      if (index >= level.min && index <= level.max) {\n        return level;\n      }\n    }\n    return IAQ_LEVELS.VERY_POOR;\n  }\n}\nexport default new IAQCalculator();","map":{"version":3,"names":["IAQ_LEVELS","IAQCalculator","calculateIAQIndex","sensorData","weights","PM25","CO2","TEMPERATURE","HUMIDITY","TVOC","totalScore","totalWeight","undefined","pm25Score","calculatePM25Score","co2Score","calculateCO2Score","tempScore","calculateTemperatureScore","humidityScore","calculateHumidityScore","tvocScore","calculateTVOCScore","iaqIndex","Math","round","index","max","min","level","getIAQLevel","components","value","key","Object","entries","VERY_POOR"],"sources":["D:/code projects/iaq-dashboard/src/services/iaqCalculator.js"],"sourcesContent":["import { IAQ_LEVELS } from '../utils/constants.js';\r\n\r\nclass IAQCalculator {\r\n  // Calculate IAQ Index based on multiple sensor values\r\n  calculateIAQIndex(sensorData) {\r\n    const weights = {\r\n      PM25: 0.25,\r\n      CO2: 0.20,\r\n      TEMPERATURE: 0.15,\r\n      HUMIDITY: 0.15,\r\n      TVOC: 0.25\r\n    };\r\n\r\n    let totalScore = 0;\r\n    let totalWeight = 0;\r\n\r\n    // PM2.5 scoring (lower is better)\r\n    if (sensorData.PM25 !== undefined) {\r\n      const pm25Score = this.calculatePM25Score(sensorData.PM25);\r\n      totalScore += pm25Score * weights.PM25;\r\n      totalWeight += weights.PM25;\r\n    }\r\n\r\n    // CO2 scoring (lower is better)\r\n    if (sensorData.CO2 !== undefined) {\r\n      const co2Score = this.calculateCO2Score(sensorData.CO2);\r\n      totalScore += co2Score * weights.CO2;\r\n      totalWeight += weights.CO2;\r\n    }\r\n\r\n    // Temperature scoring (comfort range is best)\r\n    if (sensorData.TEMPERATURE !== undefined) {\r\n      const tempScore = this.calculateTemperatureScore(sensorData.TEMPERATURE);\r\n      totalScore += tempScore * weights.TEMPERATURE;\r\n      totalWeight += weights.TEMPERATURE;\r\n    }\r\n\r\n    // Humidity scoring (comfort range is best)\r\n    if (sensorData.HUMIDITY !== undefined) {\r\n      const humidityScore = this.calculateHumidityScore(sensorData.HUMIDITY);\r\n      totalScore += humidityScore * weights.HUMIDITY;\r\n      totalWeight += weights.HUMIDITY;\r\n    }\r\n\r\n    // TVOC scoring (lower is better)\r\n    if (sensorData.TVOC !== undefined) {\r\n      const tvocScore = this.calculateTVOCScore(sensorData.TVOC);\r\n      totalScore += tvocScore * weights.TVOC;\r\n      totalWeight += weights.TVOC;\r\n    }\r\n\r\n    // Calculate weighted average\r\n    const iaqIndex = totalWeight > 0 ? Math.round(totalScore / totalWeight) : 0;\r\n    \r\n    return {\r\n      index: Math.max(0, Math.min(300, iaqIndex)), // Clamp between 0-300\r\n      level: this.getIAQLevel(iaqIndex),\r\n      components: {\r\n        PM25: sensorData.PM25 ? this.calculatePM25Score(sensorData.PM25) : null,\r\n        CO2: sensorData.CO2 ? this.calculateCO2Score(sensorData.CO2) : null,\r\n        TEMPERATURE: sensorData.TEMPERATURE ? this.calculateTemperatureScore(sensorData.TEMPERATURE) : null,\r\n        HUMIDITY: sensorData.HUMIDITY ? this.calculateHumidityScore(sensorData.HUMIDITY) : null,\r\n        TVOC: sensorData.TVOC ? this.calculateTVOCScore(sensorData.TVOC) : null\r\n      }\r\n    };\r\n  }\r\n\r\n  calculatePM25Score(value) {\r\n    if (value <= 12) return 50;\r\n    if (value <= 35) return 100;\r\n    if (value <= 55) return 150;\r\n    if (value <= 150) return 200;\r\n    return 300;\r\n  }\r\n\r\n  calculateCO2Score(value) {\r\n    if (value <= 600) return 50;\r\n    if (value <= 1000) return 100;\r\n    if (value <= 1500) return 150;\r\n    if (value <= 2000) return 200;\r\n    return 300;\r\n  }\r\n\r\n  calculateTemperatureScore(value) {\r\n    // Optimal range: 20-26°C\r\n    if (value >= 20 && value <= 26) return 50;\r\n    if (value >= 18 && value <= 28) return 100;\r\n    if (value >= 16 && value <= 30) return 150;\r\n    return 200;\r\n  }\r\n\r\n  calculateHumidityScore(value) {\r\n    // Optimal range: 40-60%\r\n    if (value >= 40 && value <= 60) return 50;\r\n    if (value >= 30 && value <= 70) return 100;\r\n    if (value >= 25 && value <= 75) return 150;\r\n    return 200;\r\n  }\r\n\r\n  calculateTVOCScore(value) {\r\n    if (value <= 220) return 50;\r\n    if (value <= 660) return 100;\r\n    if (value <= 2220) return 150;\r\n    if (value <= 5500) return 200;\r\n    return 300;\r\n  }\r\n\r\n  getIAQLevel(index) {\r\n    for (const [key, level] of Object.entries(IAQ_LEVELS)) {\r\n      if (index >= level.min && index <= level.max) {\r\n        return level;\r\n      }\r\n    }\r\n    return IAQ_LEVELS.VERY_POOR;\r\n  }\r\n}\r\n\r\nexport default new IAQCalculator();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}