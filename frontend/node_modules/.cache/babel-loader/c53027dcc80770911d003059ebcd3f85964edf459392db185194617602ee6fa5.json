{"ast":null,"code":"class ModbusService {\n  constructor() {\n    this.isConnected = false;\n    this.backendUrl = 'http://localhost:3001';\n    this.useSimulation = false;\n  }\n  async connect() {\n    try {\n      // Check if backend is running\n      const response = await fetch(`${this.backendUrl}/api/status`);\n      const status = await response.json();\n      if (status.connected) {\n        this.isConnected = true;\n        this.useSimulation = false;\n        console.log('‚úÖ Connected to real Modbus device');\n        return true;\n      } else {\n        // Try to connect\n        const connectResponse = await fetch(`${this.backendUrl}/api/connect`, {\n          method: 'POST'\n        });\n        const result = await connectResponse.json();\n        if (result.success) {\n          this.isConnected = true;\n          this.useSimulation = false;\n          console.log('‚úÖ Connected to Modbus device');\n          return true;\n        } else {\n          throw new Error('Connection failed');\n        }\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è Backend not available, using simulation');\n      this.useSimulation = true;\n      this.isConnected = true;\n      return true;\n    }\n  }\n  async readSensorData() {\n    if (this.useSimulation) {\n      return this.simulateSensorData();\n    }\n    try {\n      const response = await fetch(`${this.backendUrl}/api/sensors`);\n      const result = await response.json();\n      if (result.success) {\n        return result.data;\n      } else {\n        throw new Error(result.error);\n      }\n    } catch (error) {\n      console.log('üì° Error reading from backend, using simulation');\n      this.useSimulation = true;\n      return this.simulateSensorData();\n    }\n  }\n  simulateSensorData() {\n    return {\n      PM25: 16.60 + (Math.random() - 0.5) * 10,\n      CO2: 656.53 + (Math.random() - 0.5) * 200,\n      TEMPERATURE: 22.9 + (Math.random() - 0.5) * 4,\n      HUMIDITY: 53.47 + (Math.random() - 0.5) * 10,\n      TVOC: 328.01 + (Math.random() - 0.5) * 100,\n      timestamp: new Date().toISOString()\n    };\n  }\n  generateDifferentialPressure() {\n    return Math.random() * 6 + 2; // 2-8 Pa\n  }\n  getConnectionStatus() {\n    return {\n      connected: this.isConnected,\n      simulation: this.useSimulation\n    };\n  }\n  async disconnect() {\n    this.isConnected = false;\n  }\n}\nexport default new ModbusService();","map":{"version":3,"names":["ModbusService","constructor","isConnected","backendUrl","useSimulation","connect","response","fetch","status","json","connected","console","log","connectResponse","method","result","success","Error","error","readSensorData","simulateSensorData","data","PM25","Math","random","CO2","TEMPERATURE","HUMIDITY","TVOC","timestamp","Date","toISOString","generateDifferentialPressure","getConnectionStatus","simulation","disconnect"],"sources":["D:/code projects/iaq-dashboard/src/services/modbusService.js"],"sourcesContent":["class ModbusService {\r\n  constructor() {\r\n    this.isConnected = false;\r\n    this.backendUrl = 'http://localhost:3001';\r\n    this.useSimulation = false;\r\n  }\r\n\r\n  async connect() {\r\n    try {\r\n      // Check if backend is running\r\n      const response = await fetch(`${this.backendUrl}/api/status`);\r\n      const status = await response.json();\r\n      \r\n      if (status.connected) {\r\n        this.isConnected = true;\r\n        this.useSimulation = false;\r\n        console.log('‚úÖ Connected to real Modbus device');\r\n        return true;\r\n      } else {\r\n        // Try to connect\r\n        const connectResponse = await fetch(`${this.backendUrl}/api/connect`, {\r\n          method: 'POST'\r\n        });\r\n        const result = await connectResponse.json();\r\n        \r\n        if (result.success) {\r\n          this.isConnected = true;\r\n          this.useSimulation = false;\r\n          console.log('‚úÖ Connected to Modbus device');\r\n          return true;\r\n        } else {\r\n          throw new Error('Connection failed');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log('‚ö†Ô∏è Backend not available, using simulation');\r\n      this.useSimulation = true;\r\n      this.isConnected = true;\r\n      return true;\r\n    }\r\n  }\r\n\r\n  async readSensorData() {\r\n    if (this.useSimulation) {\r\n      return this.simulateSensorData();\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.backendUrl}/api/sensors`);\r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        return result.data;\r\n      } else {\r\n        throw new Error(result.error);\r\n      }\r\n    } catch (error) {\r\n      console.log('üì° Error reading from backend, using simulation');\r\n      this.useSimulation = true;\r\n      return this.simulateSensorData();\r\n    }\r\n  }\r\n\r\n  simulateSensorData() {\r\n    return {\r\n      PM25: 16.60 + (Math.random() - 0.5) * 10,\r\n      CO2: 656.53 + (Math.random() - 0.5) * 200,\r\n      TEMPERATURE: 22.9 + (Math.random() - 0.5) * 4,\r\n      HUMIDITY: 53.47 + (Math.random() - 0.5) * 10,\r\n      TVOC: 328.01 + (Math.random() - 0.5) * 100,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  generateDifferentialPressure() {\r\n    return Math.random() * 6 + 2; // 2-8 Pa\r\n  }\r\n\r\n  getConnectionStatus() {\r\n    return {\r\n      connected: this.isConnected,\r\n      simulation: this.useSimulation\r\n    };\r\n  }\r\n\r\n  async disconnect() {\r\n    this.isConnected = false;\r\n  }\r\n}\r\n\r\nexport default new ModbusService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}