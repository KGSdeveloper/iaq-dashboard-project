{"ast":null,"code":"\"use strict\";\n\nfunction getByteLength(type) {\n  switch (String(type).toLowerCase()) {\n    case \"int16\":\n    case \"uint16\":\n      return 2;\n    case \"int32\":\n    case \"uint32\":\n    case \"float\":\n      return 4;\n    default:\n      throw new Error(\"Unsupported type\");\n  }\n}\nfunction send({\n  fc,\n  unit,\n  address,\n  arg\n}) {\n  this._port.setID(unit);\n  switch (fc) {\n    case 1:\n      return this._port.readCoils(address, arg);\n    case 2:\n      return this._port.readDiscreteInputs(address, arg);\n    case 3:\n      return this._port.readHoldingRegisters(address, arg);\n    case 4:\n      return this._port.readInputRegisters(address, arg);\n    case 5:\n      return this._port.writeCoil(address, arg);\n    case 6:\n      return this._port.writeRegister(address, arg);\n    case 15:\n      return this._port.writeCoils(address, arg);\n    case 16:\n      return this._port.writeRegisters(address, arg);\n  }\n  return Promise.reject(new Error(\"Unknown fc code\"));\n}\nconst Worker = function (port, options) {\n  if (typeof options === \"undefined\") options = {};\n  this.maxConcurrentRequests = 1;\n  this.debug = false;\n  this._port = port;\n  this._queue = [];\n  this._scheduled = [];\n  this._running = new Map();\n  this._nextId = 0;\n  this.setOptions(options);\n};\nWorker.prototype.setOptions = function ({\n  maxConcurrentRequests,\n  debug\n}) {\n  if (maxConcurrentRequests > 0) {\n    this.maxConcurrentRequests = maxConcurrentRequests;\n  }\n  if (debug !== undefined) {\n    this.debug = Boolean(debug);\n  }\n};\nWorker.prototype.log = function (...args) {\n  if (this.debug === true) {\n    args.unshift(new Date());\n    console.log(...args);\n  }\n};\nWorker.prototype.emit = function (name, data) {\n  this._port.emit(name, data);\n};\nWorker.prototype.bufferize = function (data, type) {\n  if (Array.isArray(data) === false) {\n    data = [data];\n  }\n  const quantity = data.length;\n  const byteLength = getByteLength(type);\n  const size = quantity * byteLength;\n  const buffer = Buffer.alloc(size);\n  for (let i = 0; i < quantity; i++) {\n    if (type === \"int16\") {\n      buffer.writeInt16BE(data[i], i * byteLength);\n    } else if (type === \"uint16\") {\n      buffer.writeUInt16BE(data[i], i * byteLength);\n    } else if (type === \"int32\") {\n      buffer.writeInt32BE(data[i], i * byteLength);\n    } else if (type === \"uint32\") {\n      buffer.writeUInt32BE(data[i], i * byteLength);\n    } else if (type === \"float\") {\n      buffer.writeFloatBE(data[i], i * byteLength);\n    }\n  }\n  return buffer;\n};\nWorker.prototype.unbufferize = function (buffer, type) {\n  const byteLength = getByteLength(type);\n  const quantity = buffer.length / byteLength;\n  const data = [];\n  for (let i = 0; i < quantity; i++) {\n    if (type === \"int16\") {\n      data.push(buffer.readInt16BE(i * byteLength));\n    } else if (type === \"uint16\") {\n      data.push(buffer.readUInt16BE(i * byteLength));\n    } else if (type === \"int32\") {\n      data.push(buffer.readInt32BE(i * byteLength));\n    } else if (type === \"uint32\") {\n      data.push(buffer.readUInt32BE(i * byteLength));\n    } else if (type === \"float\") {\n      data.push(buffer.readFloatBE(i * byteLength));\n    }\n  }\n  return data;\n};\nWorker.prototype.nextId = function () {\n  this._nextId = this._nextId + 1;\n  if (this._nextId > 9999) {\n    this._nextId = 1;\n  }\n  return this._nextId;\n};\nWorker.prototype.send = function ({\n  fc,\n  unit,\n  address,\n  value,\n  quantity,\n  arg,\n  type\n}) {\n  const promise = new Promise((resolve, reject) => {\n    arg = arg || quantity || value;\n    if (fc === 1 || fc === 2) {\n      arg = arg || 1;\n    }\n    if (fc === 3 || fc === 4) {\n      type = type || \"int16\";\n      arg = (arg || 1) * getByteLength(type) / 2;\n    }\n    if (fc === 6 || fc === 16) {\n      type = type || \"int16\";\n      arg = this.bufferize(arg, type);\n      if (fc === 6 && arg.length > 2) {\n        fc = 16;\n      }\n    }\n    if (fc === 5 && arg instanceof Array && arg.length > 1) {\n      fc = 15;\n    }\n    const id = this.nextId();\n    this.log(\"queue push\", `#${id}`, fc, unit, address, arg, type);\n    this._queue.push({\n      id,\n      fc,\n      unit,\n      address,\n      arg,\n      type,\n      resolve,\n      reject\n    });\n  });\n  this.process();\n  return promise;\n};\nWorker.prototype.process = function () {\n  if (this._port.isOpen === false) {\n    this._queue = [];\n    this._scheduled = [];\n    this._running = new Map();\n    this._nextId = 0;\n    return;\n  }\n  setTimeout(() => this.run(), 1);\n};\nWorker.prototype.run = function () {\n  if (this._running.size >= this.maxConcurrentRequests) {\n    return;\n  }\n  let request = this._queue.shift();\n  if (!request) {\n    request = this._scheduled.shift();\n  }\n  if (!request) {\n    return; // Well Done\n  }\n  if (typeof request.checkBeforeQueuing === \"function\") {\n    if (request.checkBeforeQueuing() === false) {\n      return this.process(); // Skip current request and go on\n    }\n  }\n  this._running.set(request.id, request);\n  this.log(\"send\", JSON.stringify(request));\n  this.emit(\"request\", {\n    request\n  });\n  send.apply(this, [request]).then(response => {\n    let data = [];\n    if (request.fc === 1 || request.fc === 2) {\n      for (let i = 0; i < request.arg; i++) {\n        data.push(Boolean(response.data[i]));\n      }\n    } else if (request.fc === 3 || request.fc === 4) {\n      data = this.unbufferize(response.buffer, request.type);\n    } else if (request.arg instanceof Array) {\n      data = request.arg;\n    } else if (request.arg instanceof Buffer && request.type) {\n      data = this.unbufferize(request.arg, request.type);\n    } else {\n      data.push(request.arg);\n    }\n    this._running.delete(request.id);\n    this.emit(\"response\", {\n      request,\n      response: data\n    });\n    request.resolve(data);\n    this.process();\n  }).catch(error => {\n    this._running.delete(request.id);\n    error.request = request;\n    this.emit(\"failed\", error);\n    request.reject(error);\n    this.process();\n  });\n  this.process();\n};\nWorker.prototype._poll_send = function (result, {\n  i,\n  fc,\n  unit,\n  address,\n  arg,\n  items,\n  length,\n  type\n}, {\n  skipErrors\n}) {\n  const promise = new Promise((res, rej) => {\n    const id = this.nextId();\n    this.log(\"scheduled push\", \"poll #\" + result.id, \"req #\" + i, \"#\" + id, fc, length, type);\n    const resolve = function (response) {\n      const data = items.map((address, index) => ({\n        address,\n        value: response[index]\n      }));\n      result._req += 1;\n      result.done += 1;\n      result.data = [...result.data, ...data];\n      res(data);\n    };\n    const reject = function (error) {\n      result._req += 1;\n      result.error = error;\n      rej(error);\n    };\n    const checkBeforeQueuing = function () {\n      return result.error === null || skipErrors === true;\n    };\n    this._scheduled.push({\n      id,\n      i,\n      fc,\n      unit,\n      address,\n      arg,\n      items,\n      length,\n      type,\n      result,\n      checkBeforeQueuing,\n      resolve,\n      reject\n    });\n  });\n  this.process();\n  return promise;\n};\nWorker.prototype.poll = function ({\n  unit,\n  map,\n  onProgress,\n  maxChunkSize,\n  skipErrors,\n  defaultType\n}) {\n  maxChunkSize = maxChunkSize || 32;\n  skipErrors = Boolean(skipErrors);\n  defaultType = defaultType || \"int16\";\n  if (unit < 1 || unit > 250 || isNaN(unit) || unit === undefined) {\n    throw new Error(\"invalid unit\");\n  }\n  this.log(\"poll\", `unit=${unit}`, \"map size=\" + Object.keys(map).length, `maxChunkSize=${maxChunkSize}`, `skipErrors=${skipErrors}`);\n  const result = {\n    id: this.nextId(),\n    unit,\n    total: 0,\n    done: 0,\n    data: [],\n    error: null,\n    dt: Date.now(),\n    _req: 0\n  };\n  const registers = [];\n  map.forEach(({\n    fc,\n    address,\n    type\n  }) => {\n    fc = parseInt(fc);\n    if (fc === 3 || fc === 4) {\n      type = type || defaultType;\n    } else if (fc === 1 || fc === 2) {\n      type = \"bool\";\n    } else {\n      throw new Error(\"unsupported fc\");\n    }\n    if (address instanceof Array) {\n      address.forEach(item => {\n        registers.push({\n          fc,\n          address: parseInt(item),\n          type: type || null\n        });\n      });\n    } else {\n      address = parseInt(address);\n      registers.push({\n        fc,\n        address,\n        type: type || null\n      });\n    }\n  });\n  registers.sort((a, b) => {\n    if (a.fc === b.fc) {\n      return a.address - b.address;\n    }\n    return a.fc - b.fc;\n  });\n  const requests = registers.reduce(function (chunks, register, i, arr) {\n    let chunk = 0;\n    if (chunks.length) {\n      chunk = chunks.length - 1;\n    }\n    if (i > 0) {\n      const lastRegister = arr[i - 1];\n      if (lastRegister.fc !== register.fc) {\n        chunk += 1;\n      } else if (lastRegister.type !== register.type) {\n        chunk += 1;\n      } else if ([3, 4].indexOf(register.fc) >= 0 && register.address - lastRegister.address !== getByteLength(register.type) / 2) {\n        chunk += 1;\n      } else if (chunks[chunk].items.length >= maxChunkSize) {\n        chunk += 1;\n      }\n    }\n    if (chunks[chunk] === undefined) {\n      chunks[chunk] = {\n        fc: register.fc,\n        items: [],\n        length: 0,\n        type: register.type\n      };\n    }\n    chunks[chunk].items.push(register.address);\n    if ([3, 4].indexOf(register.fc) >= 0) {\n      chunks[chunk].length += getByteLength(register.type) / 2;\n    } else {\n      chunks[chunk].length += 1;\n    }\n    return chunks;\n  }, []);\n  result.total = requests.length;\n  return new Promise(resolve => {\n    const check = function () {\n      if (result._req === result.total) {\n        result.dt = Date.now() - result.dt;\n        resolve(result);\n      } else if (result.error && skipErrors !== true) {\n        result.dt = Date.now() - result.dt;\n        resolve(result);\n      }\n    };\n    for (let i = 0; i < requests.length; i++) {\n      const {\n        fc,\n        items,\n        length,\n        type\n      } = requests[i];\n      this._poll_send(result, {\n        i,\n        unit,\n        fc,\n        address: parseInt(items[0]),\n        items,\n        arg: length,\n        length,\n        type\n      }, {\n        skipErrors\n      }).then(data => {\n        if (typeof onProgress === \"function\") {\n          onProgress(result.done / result.total, data);\n        }\n        check();\n      }).catch(() => check());\n    }\n  });\n};\nmodule.exports = Worker;","map":{"version":3,"names":["getByteLength","type","String","toLowerCase","Error","send","fc","unit","address","arg","_port","setID","readCoils","readDiscreteInputs","readHoldingRegisters","readInputRegisters","writeCoil","writeRegister","writeCoils","writeRegisters","Promise","reject","Worker","port","options","maxConcurrentRequests","debug","_queue","_scheduled","_running","Map","_nextId","setOptions","prototype","undefined","Boolean","log","args","unshift","Date","console","emit","name","data","bufferize","Array","isArray","quantity","length","byteLength","size","buffer","Buffer","alloc","i","writeInt16BE","writeUInt16BE","writeInt32BE","writeUInt32BE","writeFloatBE","unbufferize","push","readInt16BE","readUInt16BE","readInt32BE","readUInt32BE","readFloatBE","nextId","value","promise","resolve","id","process","isOpen","setTimeout","run","request","shift","checkBeforeQueuing","set","JSON","stringify","apply","then","response","delete","catch","error","_poll_send","result","items","skipErrors","res","rej","map","index","_req","done","poll","onProgress","maxChunkSize","defaultType","isNaN","Object","keys","total","dt","now","registers","forEach","parseInt","item","sort","a","b","requests","reduce","chunks","register","arr","chunk","lastRegister","indexOf","check","module","exports"],"sources":["D:/code projects/iaq-dashboard/node_modules/modbus-serial/worker/index.js"],"sourcesContent":["\"use strict\";\n\nfunction getByteLength(type) {\n    switch (String(type).toLowerCase()) {\n        case \"int16\":\n        case \"uint16\":\n            return 2;\n        case \"int32\":\n        case \"uint32\":\n        case \"float\":\n            return 4;\n        default:\n            throw new Error(\"Unsupported type\");\n    }\n}\n\nfunction send({ fc, unit, address, arg }) {\n\n    this._port.setID(unit);\n\n    switch (fc) {\n        case 1:  return this._port.readCoils(address, arg);\n        case 2:  return this._port.readDiscreteInputs(address, arg);\n        case 3:  return this._port.readHoldingRegisters(address, arg);\n        case 4:  return this._port.readInputRegisters(address, arg);\n\n        case 5:  return this._port.writeCoil(address, arg);\n        case 6:  return this._port.writeRegister(address, arg);\n        case 15: return this._port.writeCoils(address, arg);\n        case 16: return this._port.writeRegisters(address, arg);\n    }\n\n    return Promise.reject(new Error(\"Unknown fc code\"));\n}\n\nconst Worker = function(port, options) {\n    if (typeof(options) === \"undefined\") options = {};\n\n    this.maxConcurrentRequests = 1;\n\n    this.debug = false;\n\n    this._port = port;\n\n    this._queue = [];\n\n    this._scheduled = [];\n\n    this._running = new Map();\n\n    this._nextId = 0;\n\n    this.setOptions(options);\n};\n\nWorker.prototype.setOptions = function({ maxConcurrentRequests, debug }) {\n    if(maxConcurrentRequests > 0) {\n        this.maxConcurrentRequests = maxConcurrentRequests;\n    }\n\n    if(debug !== undefined) {\n        this.debug = Boolean(debug);\n    }\n};\nWorker.prototype.log = function(...args) {\n    if(this.debug === true) {\n        args.unshift(new Date());\n        console.log(...args);\n    }\n};\nWorker.prototype.emit = function(name, data) {\n    this._port.emit(name, data);\n};\nWorker.prototype.bufferize = function(data, type) {\n\n    if(Array.isArray(data) === false) {\n        data = [data];\n    }\n\n    const quantity = data.length;\n    const byteLength = getByteLength(type);\n    const size = quantity * byteLength;\n    const buffer = Buffer.alloc(size);\n\n    for(let i = 0; i < quantity; i++) {\n        if(type === \"int16\") {\n            buffer.writeInt16BE(data[i], i * byteLength);\n        } else if(type === \"uint16\") {\n            buffer.writeUInt16BE(data[i], i * byteLength);\n        } else if(type === \"int32\") {\n            buffer.writeInt32BE(data[i], i * byteLength);\n        } else if(type === \"uint32\") {\n            buffer.writeUInt32BE(data[i], i * byteLength);\n        } else if(type === \"float\") {\n            buffer.writeFloatBE(data[i], i * byteLength);\n        }\n    }\n\n    return buffer;\n};\nWorker.prototype.unbufferize = function(buffer, type) {\n    const byteLength = getByteLength(type);\n    const quantity = buffer.length / byteLength;\n    const data = [];\n\n    for(let i = 0; i < quantity; i++) {\n        if(type === \"int16\") {\n            data.push(buffer.readInt16BE(i * byteLength));\n        } else if(type === \"uint16\") {\n            data.push(buffer.readUInt16BE(i * byteLength));\n        } else if(type === \"int32\") {\n            data.push(buffer.readInt32BE(i * byteLength));\n        } else if(type === \"uint32\") {\n            data.push(buffer.readUInt32BE(i * byteLength));\n        } else if(type === \"float\") {\n            data.push(buffer.readFloatBE(i * byteLength));\n        }\n    }\n\n    return data;\n};\n\nWorker.prototype.nextId = function() {\n    this._nextId = this._nextId + 1;\n\n    if(this._nextId > 9999) {\n        this._nextId = 1;\n    }\n\n    return this._nextId;\n};\nWorker.prototype.send = function({ fc, unit, address, value, quantity, arg, type }) {\n    const promise = new Promise((resolve, reject) => {\n\n        arg = arg || quantity || value;\n\n        if(fc === 1 || fc === 2) {\n            arg = arg || 1;\n        }\n\n        if(fc === 3 || fc === 4) {\n            type = type || \"int16\";\n            arg = (arg || 1) * getByteLength(type) / 2;\n        }\n\n        if(fc === 6 || fc === 16) {\n            type = type || \"int16\";\n            arg = this.bufferize(arg, type);\n            if(fc === 6 && arg.length > 2) {\n                fc = 16;\n            }\n        }\n\n        if(fc === 5 && arg instanceof Array && arg.length > 1) {\n            fc = 15;\n        }\n\n        const id = this.nextId();\n\n        this.log(\"queue push\", `#${id}`, fc, unit, address, arg, type);\n        this._queue.push({ id, fc, unit, address, arg, type, resolve, reject });\n    });\n\n    this.process();\n\n    return promise;\n};\nWorker.prototype.process = function() {\n    if(this._port.isOpen === false) {\n        this._queue = [];\n        this._scheduled = [];\n        this._running = new Map();\n        this._nextId = 0;\n        return;\n    }\n\n    setTimeout(() => this.run(), 1);\n};\nWorker.prototype.run = function() {\n    if(this._running.size >= this.maxConcurrentRequests) {\n        return;\n    }\n\n    let request = this._queue.shift();\n\n    if(!request) {\n        request = this._scheduled.shift();\n    }\n\n    if(!request) {\n        return; // Well Done\n    }\n\n    if(typeof request.checkBeforeQueuing === \"function\") {\n        if(request.checkBeforeQueuing() === false) {\n            return this.process(); // Skip current request and go on\n        }\n    }\n\n    this._running.set(request.id, request);\n\n    this.log(\"send\", JSON.stringify(request));\n\n    this.emit(\"request\", { request });\n\n    send.apply(this, [request])\n        .then((response) => {\n            let data = [];\n\n            if(request.fc === 1 || request.fc === 2) {\n                for(let i = 0; i < request.arg; i++) {\n                    data.push(Boolean(response.data[i]));\n                }\n            } else if(request.fc === 3 || request.fc === 4) {\n                data = this.unbufferize(response.buffer, request.type);\n            } else if(request.arg instanceof Array) {\n                data = request.arg;\n            } else if(request.arg instanceof Buffer && request.type) {\n                data = this.unbufferize(request.arg, request.type);\n            } else {\n                data.push(request.arg);\n            }\n\n            this._running.delete(request.id);\n\n            this.emit(\"response\", { request, response: data });\n\n            request.resolve(data);\n\n            this.process();\n        })\n        .catch((error) => {\n            this._running.delete(request.id);\n\n            error.request = request;\n\n            this.emit(\"failed\", error);\n\n            request.reject(error);\n\n            this.process();\n        });\n\n    this.process();\n};\n\nWorker.prototype._poll_send = function(result, { i, fc, unit, address, arg, items, length, type }, { skipErrors }) {\n    const promise = new Promise((res, rej) => {\n        const id = this.nextId();\n\n        this.log(\"scheduled push\", \"poll #\" + result.id, \"req #\" + i, \"#\" + id, fc, length, type);\n\n        const resolve = function(response) {\n            const data = items.map((address, index) => ({ address, value: response[index] }));\n            result._req += 1;\n            result.done += 1;\n            result.data = [...result.data, ...data];\n            res(data);\n        };\n\n        const reject = function(error) {\n            result._req += 1;\n            result.error = error;\n            rej(error);\n        };\n\n        const checkBeforeQueuing = function() {\n            return result.error === null || skipErrors === true;\n        };\n\n        this._scheduled.push({ id, i, fc, unit, address, arg, items, length, type, result, checkBeforeQueuing, resolve, reject });\n    });\n\n    this.process();\n\n    return promise;\n};\n\nWorker.prototype.poll = function({ unit, map, onProgress, maxChunkSize, skipErrors, defaultType }) {\n    maxChunkSize = maxChunkSize || 32;\n    skipErrors = Boolean(skipErrors);\n    defaultType = defaultType || \"int16\";\n\n    if(unit < 1 || unit > 250 || isNaN(unit) || unit === undefined) {\n        throw new Error(\"invalid unit\");\n    }\n\n    this.log(\"poll\", `unit=${unit}`, \"map size=\" + Object.keys(map).length, `maxChunkSize=${maxChunkSize}`, `skipErrors=${skipErrors}`);\n\n    const result = {\n        id: this.nextId(),\n        unit,\n        total: 0,\n        done: 0,\n        data: [],\n        error: null,\n        dt: Date.now(),\n        _req: 0\n    };\n\n    const registers = [];\n    map.forEach(({ fc, address, type }) => {\n        fc = parseInt(fc);\n\n        if(fc === 3 || fc === 4) {\n            type = type || defaultType;\n        } else if(fc === 1 || fc === 2) {\n            type = \"bool\";\n        } else {\n            throw new Error(\"unsupported fc\");\n        }\n\n        if(address instanceof Array) {\n            address.forEach((item) => {\n                registers.push({ fc, address: parseInt(item), type: type || null });\n            });\n        } else {\n            address = parseInt(address);\n            registers.push({ fc, address, type: type || null });\n        }\n    });\n\n    registers.sort((a, b) => {\n        if(a.fc === b.fc) {\n            return a.address - b.address;\n        }\n\n        return a.fc - b.fc;\n    });\n\n    const requests = registers.reduce(function(chunks, register, i, arr) {\n        let chunk = 0;\n\n        if(chunks.length) {\n            chunk = chunks.length - 1;\n        }\n\n        if(i > 0) {\n            const lastRegister = arr[i - 1];\n\n            if(lastRegister.fc !== register.fc) {\n                chunk += 1;\n            } else if(lastRegister.type !== register.type) {\n                chunk += 1;\n            } else if([3, 4].indexOf(register.fc) >= 0 && register.address - lastRegister.address !== getByteLength(register.type) / 2) {\n                chunk += 1;\n            } else if(chunks[chunk].items.length >= maxChunkSize) {\n                chunk += 1;\n            }\n        }\n\n        if(chunks[chunk] === undefined) {\n            chunks[chunk] = {\n                fc: register.fc,\n                items: [],\n                length: 0,\n                type: register.type\n            };\n        }\n\n        chunks[chunk].items.push(register.address);\n\n        if ([3, 4].indexOf(register.fc) >= 0) {\n            chunks[chunk].length += getByteLength(register.type) / 2;\n        } else {\n            chunks[chunk].length += 1;\n        }\n\n        return chunks;\n    }, []);\n\n    result.total = requests.length;\n\n    return new Promise(((resolve) => {\n        const check = function() {\n            if(result._req === result.total) {\n                result.dt = Date.now() - result.dt;\n                resolve(result);\n            } else if(result.error && skipErrors !== true) {\n                result.dt = Date.now() - result.dt;\n                resolve(result);\n            }\n        };\n\n        for(let i = 0; i < requests.length; i++) {\n            const { fc, items, length, type } = requests[i];\n\n            this._poll_send(result, { i, unit, fc, address: parseInt(items[0]), items, arg: length, length, type }, {\n                skipErrors\n            })\n                .then((data) => {\n                    if(typeof onProgress === \"function\") {\n                        onProgress(result.done / result.total, data);\n                    }\n                    check();\n                })\n                .catch(() => check());\n        }\n    }));\n};\n\nmodule.exports = Worker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}