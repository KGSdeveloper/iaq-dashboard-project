{"ast":null,"code":"class SensorService {\n  constructor() {\n    this.subscribers = [];\n    this.intervalId = null;\n    this.isSimulating = true;\n    this.currentData = {\n      PM25: 16.60,\n      CO2: 656.53,\n      TEMPERATURE: 22.9,\n      HUMIDITY: 53.47,\n      TVOC: 328.01,\n      DIFFERENTIAL_PRESSURE: 4.03,\n      timestamp: Date.now(),\n      connectionStatus: {\n        connected: true,\n        simulation: true\n      }\n    };\n  }\n\n  // Subscribe to sensor data updates\n  subscribe(callback) {\n    this.subscribers.push(callback);\n\n    // Immediately send current data to new subscriber\n    callback(this.currentData);\n\n    // Return unsubscribe function\n    return () => {\n      this.subscribers = this.subscribers.filter(sub => sub !== callback);\n    };\n  }\n\n  // Notify all subscribers\n  notifySubscribers(data) {\n    this.subscribers.forEach(callback => callback(data));\n  }\n\n  // Start monitoring sensors\n  startMonitoring(interval = 5000) {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n    this.intervalId = setInterval(() => {\n      this.fetchSensorData();\n    }, interval);\n\n    // Initial fetch\n    this.fetchSensorData();\n  }\n\n  // Stop monitoring\n  stopMonitoring() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n  }\n\n  // Fetch sensor data (real or simulated)\n  async fetchSensorData() {\n    try {\n      let data;\n      if (this.isSimulating) {\n        data = this.generateSimulatedData();\n      } else {\n        data = await this.fetchRealSensorData();\n      }\n      this.currentData = {\n        ...data,\n        timestamp: Date.now(),\n        connectionStatus: {\n          connected: true,\n          simulation: this.isSimulating\n        }\n      };\n      this.notifySubscribers(this.currentData);\n    } catch (error) {\n      console.error('Error fetching sensor data:', error);\n      this.notifySubscribers({\n        ...this.currentData,\n        error: 'Failed to fetch sensor data',\n        connectionStatus: {\n          connected: false,\n          simulation: this.isSimulating\n        }\n      });\n    }\n  }\n\n  // Generate simulated data with realistic variations\n  generateSimulatedData() {\n    const baseData = {\n      PM25: 16.60,\n      CO2: 656.53,\n      TEMPERATURE: 22.9,\n      HUMIDITY: 53.47,\n      TVOC: 328.01,\n      DIFFERENTIAL_PRESSURE: 4.03\n    };\n\n    // Add small random variations\n    return {\n      PM25: this.addVariation(baseData.PM25, 0.5),\n      CO2: this.addVariation(baseData.CO2, 10),\n      TEMPERATURE: this.addVariation(baseData.TEMPERATURE, 0.2),\n      HUMIDITY: this.addVariation(baseData.HUMIDITY, 1),\n      TVOC: this.addVariation(baseData.TVOC, 5),\n      DIFFERENTIAL_PRESSURE: this.addVariation(baseData.DIFFERENTIAL_PRESSURE, 0.1)\n    };\n  }\n\n  // Add random variation to a value\n  addVariation(baseValue, maxVariation) {\n    const variation = (Math.random() - 0.5) * 2 * maxVariation;\n    return Math.max(0, baseValue + variation);\n  }\n\n  // Fetch real sensor data from hardware/API\n  async fetchRealSensorData() {\n    // This would connect to your actual sensor hardware\n    // For now, return simulated data\n\n    try {\n      // Example API call\n      // const response = await fetch('/api/sensors');\n      // return await response.json();\n\n      // Or Modbus connection\n      // const modbusData = await this.readModbusData();\n      // return modbusData;\n\n      // For now, return simulated data\n      return this.generateSimulatedData();\n    } catch (error) {\n      throw new Error('Failed to connect to sensor hardware');\n    }\n  }\n\n  // Read data from Modbus devices\n  async readModbusData() {\n    // This would use modbus-serial library to read from actual devices\n    // Implementation depends on your specific hardware setup\n\n    /*\r\n    const ModbusRTU = require(\"modbus-serial\");\r\n    const client = new ModbusRTU();\r\n    \r\n    try {\r\n      await client.connectTCP(\"192.168.1.100\", { port: 502 });\r\n      client.setID(1);\r\n      \r\n      const pm25 = await client.readHoldingRegisters(61, 1);\r\n      const co2 = await client.readHoldingRegisters(62, 1);\r\n      const temp = await client.readHoldingRegisters(63, 1);\r\n      const humidity = await client.readHoldingRegisters(64, 1);\r\n      const tvoc = await client.readHoldingRegisters(65, 1);\r\n      \r\n      client.close();\r\n      \r\n      return {\r\n        PM25: pm25.data[0] / 100,\r\n        CO2: co2.data[0],\r\n        TEMPERATURE: temp.data[0] / 100,\r\n        HUMIDITY: humidity.data[0] / 100,\r\n        TVOC: tvoc.data[0],\r\n        DIFFERENTIAL_PRESSURE: 4.03 // From separate sensor\r\n      };\r\n    } catch (error) {\r\n      client.close();\r\n      throw error;\r\n    }\r\n    */\n\n    return this.generateSimulatedData();\n  }\n\n  // Manual refresh\n  async refreshData() {\n    await this.fetchSensorData();\n  }\n\n  // Toggle between real and simulated data\n  setSimulationMode(enabled) {\n    this.isSimulating = enabled;\n    this.currentData.connectionStatus.simulation = enabled;\n  }\n\n  // Get current data\n  getCurrentData() {\n    return this.currentData;\n  }\n}\n\n// Export singleton instance\nconst sensorService = new SensorService();\nexport default sensorService;","map":{"version":3,"names":["SensorService","constructor","subscribers","intervalId","isSimulating","currentData","PM25","CO2","TEMPERATURE","HUMIDITY","TVOC","DIFFERENTIAL_PRESSURE","timestamp","Date","now","connectionStatus","connected","simulation","subscribe","callback","push","filter","sub","notifySubscribers","data","forEach","startMonitoring","interval","clearInterval","setInterval","fetchSensorData","stopMonitoring","generateSimulatedData","fetchRealSensorData","error","console","baseData","addVariation","baseValue","maxVariation","variation","Math","random","max","Error","readModbusData","refreshData","setSimulationMode","enabled","getCurrentData","sensorService"],"sources":["D:/code projects/iaq-dashboard-project/frontend/src/services/sensorService.js"],"sourcesContent":["class SensorService {\r\n  constructor() {\r\n    this.subscribers = [];\r\n    this.intervalId = null;\r\n    this.isSimulating = true;\r\n    this.currentData = {\r\n      PM25: 16.60,\r\n      CO2: 656.53,\r\n      TEMPERATURE: 22.9,\r\n      HUMIDITY: 53.47,\r\n      TVOC: 328.01,\r\n      DIFFERENTIAL_PRESSURE: 4.03,\r\n      timestamp: Date.now(),\r\n      connectionStatus: {\r\n        connected: true,\r\n        simulation: true\r\n      }\r\n    };\r\n  }\r\n\r\n  // Subscribe to sensor data updates\r\n  subscribe(callback) {\r\n    this.subscribers.push(callback);\r\n    \r\n    // Immediately send current data to new subscriber\r\n    callback(this.currentData);\r\n    \r\n    // Return unsubscribe function\r\n    return () => {\r\n      this.subscribers = this.subscribers.filter(sub => sub !== callback);\r\n    };\r\n  }\r\n\r\n  // Notify all subscribers\r\n  notifySubscribers(data) {\r\n    this.subscribers.forEach(callback => callback(data));\r\n  }\r\n\r\n  // Start monitoring sensors\r\n  startMonitoring(interval = 5000) {\r\n    if (this.intervalId) {\r\n      clearInterval(this.intervalId);\r\n    }\r\n\r\n    this.intervalId = setInterval(() => {\r\n      this.fetchSensorData();\r\n    }, interval);\r\n\r\n    // Initial fetch\r\n    this.fetchSensorData();\r\n  }\r\n\r\n  // Stop monitoring\r\n  stopMonitoring() {\r\n    if (this.intervalId) {\r\n      clearInterval(this.intervalId);\r\n      this.intervalId = null;\r\n    }\r\n  }\r\n\r\n  // Fetch sensor data (real or simulated)\r\n  async fetchSensorData() {\r\n    try {\r\n      let data;\r\n      \r\n      if (this.isSimulating) {\r\n        data = this.generateSimulatedData();\r\n      } else {\r\n        data = await this.fetchRealSensorData();\r\n      }\r\n\r\n      this.currentData = {\r\n        ...data,\r\n        timestamp: Date.now(),\r\n        connectionStatus: {\r\n          connected: true,\r\n          simulation: this.isSimulating\r\n        }\r\n      };\r\n\r\n      this.notifySubscribers(this.currentData);\r\n    } catch (error) {\r\n      console.error('Error fetching sensor data:', error);\r\n      \r\n      this.notifySubscribers({\r\n        ...this.currentData,\r\n        error: 'Failed to fetch sensor data',\r\n        connectionStatus: {\r\n          connected: false,\r\n          simulation: this.isSimulating\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Generate simulated data with realistic variations\r\n  generateSimulatedData() {\r\n    const baseData = {\r\n      PM25: 16.60,\r\n      CO2: 656.53,\r\n      TEMPERATURE: 22.9,\r\n      HUMIDITY: 53.47,\r\n      TVOC: 328.01,\r\n      DIFFERENTIAL_PRESSURE: 4.03\r\n    };\r\n\r\n    // Add small random variations\r\n    return {\r\n      PM25: this.addVariation(baseData.PM25, 0.5),\r\n      CO2: this.addVariation(baseData.CO2, 10),\r\n      TEMPERATURE: this.addVariation(baseData.TEMPERATURE, 0.2),\r\n      HUMIDITY: this.addVariation(baseData.HUMIDITY, 1),\r\n      TVOC: this.addVariation(baseData.TVOC, 5),\r\n      DIFFERENTIAL_PRESSURE: this.addVariation(baseData.DIFFERENTIAL_PRESSURE, 0.1)\r\n    };\r\n  }\r\n\r\n  // Add random variation to a value\r\n  addVariation(baseValue, maxVariation) {\r\n    const variation = (Math.random() - 0.5) * 2 * maxVariation;\r\n    return Math.max(0, baseValue + variation);\r\n  }\r\n\r\n  // Fetch real sensor data from hardware/API\r\n  async fetchRealSensorData() {\r\n    // This would connect to your actual sensor hardware\r\n    // For now, return simulated data\r\n    \r\n    try {\r\n      // Example API call\r\n      // const response = await fetch('/api/sensors');\r\n      // return await response.json();\r\n      \r\n      // Or Modbus connection\r\n      // const modbusData = await this.readModbusData();\r\n      // return modbusData;\r\n      \r\n      // For now, return simulated data\r\n      return this.generateSimulatedData();\r\n    } catch (error) {\r\n      throw new Error('Failed to connect to sensor hardware');\r\n    }\r\n  }\r\n\r\n  // Read data from Modbus devices\r\n  async readModbusData() {\r\n    // This would use modbus-serial library to read from actual devices\r\n    // Implementation depends on your specific hardware setup\r\n    \r\n    /*\r\n    const ModbusRTU = require(\"modbus-serial\");\r\n    const client = new ModbusRTU();\r\n    \r\n    try {\r\n      await client.connectTCP(\"192.168.1.100\", { port: 502 });\r\n      client.setID(1);\r\n      \r\n      const pm25 = await client.readHoldingRegisters(61, 1);\r\n      const co2 = await client.readHoldingRegisters(62, 1);\r\n      const temp = await client.readHoldingRegisters(63, 1);\r\n      const humidity = await client.readHoldingRegisters(64, 1);\r\n      const tvoc = await client.readHoldingRegisters(65, 1);\r\n      \r\n      client.close();\r\n      \r\n      return {\r\n        PM25: pm25.data[0] / 100,\r\n        CO2: co2.data[0],\r\n        TEMPERATURE: temp.data[0] / 100,\r\n        HUMIDITY: humidity.data[0] / 100,\r\n        TVOC: tvoc.data[0],\r\n        DIFFERENTIAL_PRESSURE: 4.03 // From separate sensor\r\n      };\r\n    } catch (error) {\r\n      client.close();\r\n      throw error;\r\n    }\r\n    */\r\n    \r\n    return this.generateSimulatedData();\r\n  }\r\n\r\n  // Manual refresh\r\n  async refreshData() {\r\n    await this.fetchSensorData();\r\n  }\r\n\r\n  // Toggle between real and simulated data\r\n  setSimulationMode(enabled) {\r\n    this.isSimulating = enabled;\r\n    this.currentData.connectionStatus.simulation = enabled;\r\n  }\r\n\r\n  // Get current data\r\n  getCurrentData() {\r\n    return this.currentData;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nconst sensorService = new SensorService();\r\nexport default sensorService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}