{"ast":null,"code":"import modbusService from './modbusService.js';\nimport iaqCalculator from './iaqCalculator.js';\nimport { getRandomInRange, getCurrentTimestamp } from '../utils/helpers.js';\nclass SensorService {\n  constructor() {\n    this.isRunning = false;\n    this.updateInterval = null;\n    this.subscribers = [];\n    this.currentData = {};\n  }\n  subscribe(callback) {\n    this.subscribers.push(callback);\n    return () => {\n      this.subscribers = this.subscribers.filter(sub => sub !== callback);\n    };\n  }\n  notifySubscribers(data) {\n    this.subscribers.forEach(callback => callback(data));\n  }\n  async startMonitoring(intervalMs = 5000) {\n    if (this.isRunning) return;\n    this.isRunning = true;\n\n    // Try to connect to Modbus device\n    const connected = await modbusService.connect();\n    this.updateInterval = setInterval(async () => {\n      try {\n        let sensorData;\n        if (connected) {\n          // Try to read real sensor data\n          try {\n            sensorData = await modbusService.readSensorData();\n          } catch (error) {\n            console.warn('Failed to read from Modbus, using simulated data:', error);\n            sensorData = modbusService.simulateSensorData();\n          }\n        } else {\n          // Use simulated data\n          sensorData = modbusService.simulateSensorData();\n        }\n\n        // Add differential pressure (simulated)\n        sensorData.DIFFERENTIAL_PRESSURE = getRandomInRange(2, 8);\n\n        // Calculate IAQ Index\n        const iaqResult = iaqCalculator.calculateIAQIndex(sensorData);\n\n        // Prepare complete data object\n        const completeData = {\n          ...sensorData,\n          IAQ_INDEX: iaqResult.index,\n          IAQ_LEVEL: iaqResult.level,\n          IAQ_COMPONENTS: iaqResult.components,\n          timestamp: getCurrentTimestamp(),\n          location: 'Pathumwan, Bangkok' // You can make this configurable\n        };\n        this.currentData = completeData;\n        this.notifySubscribers(completeData);\n      } catch (error) {\n        console.error('Error in sensor monitoring:', error);\n      }\n    }, intervalMs);\n    console.log(`Sensor monitoring started with ${intervalMs}ms interval`);\n  }\n  async stopMonitoring() {\n    if (!this.isRunning) return;\n    this.isRunning = false;\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n    await modbusService.disconnect();\n    console.log('Sensor monitoring stopped');\n  }\n  getCurrentData() {\n    return this.currentData;\n  }\n}\nexport default new SensorService();","map":{"version":3,"names":["modbusService","iaqCalculator","getRandomInRange","getCurrentTimestamp","SensorService","constructor","isRunning","updateInterval","subscribers","currentData","subscribe","callback","push","filter","sub","notifySubscribers","data","forEach","startMonitoring","intervalMs","connected","connect","setInterval","sensorData","readSensorData","error","console","warn","simulateSensorData","DIFFERENTIAL_PRESSURE","iaqResult","calculateIAQIndex","completeData","IAQ_INDEX","index","IAQ_LEVEL","level","IAQ_COMPONENTS","components","timestamp","location","log","stopMonitoring","clearInterval","disconnect","getCurrentData"],"sources":["D:/code projects/iaq-dashboard-project/frontend/src/services/sensorService.js"],"sourcesContent":["import modbusService from './modbusService.js';\r\nimport iaqCalculator from './iaqCalculator.js';\r\nimport { getRandomInRange, getCurrentTimestamp } from '../utils/helpers.js';\r\n\r\nclass SensorService {\r\n  constructor() {\r\n    this.isRunning = false;\r\n    this.updateInterval = null;\r\n    this.subscribers = [];\r\n    this.currentData = {};\r\n  }\r\n\r\n  subscribe(callback) {\r\n    this.subscribers.push(callback);\r\n    return () => {\r\n      this.subscribers = this.subscribers.filter(sub => sub !== callback);\r\n    };\r\n  }\r\n\r\n  notifySubscribers(data) {\r\n    this.subscribers.forEach(callback => callback(data));\r\n  }\r\n\r\n  async startMonitoring(intervalMs = 5000) {\r\n    if (this.isRunning) return;\r\n\r\n    this.isRunning = true;\r\n    \r\n    // Try to connect to Modbus device\r\n    const connected = await modbusService.connect();\r\n    \r\n    this.updateInterval = setInterval(async () => {\r\n      try {\r\n        let sensorData;\r\n        \r\n        if (connected) {\r\n          // Try to read real sensor data\r\n          try {\r\n            sensorData = await modbusService.readSensorData();\r\n          } catch (error) {\r\n            console.warn('Failed to read from Modbus, using simulated data:', error);\r\n            sensorData = modbusService.simulateSensorData();\r\n          }\r\n        } else {\r\n          // Use simulated data\r\n          sensorData = modbusService.simulateSensorData();\r\n        }\r\n\r\n        // Add differential pressure (simulated)\r\n        sensorData.DIFFERENTIAL_PRESSURE = getRandomInRange(2, 8);\r\n\r\n        // Calculate IAQ Index\r\n        const iaqResult = iaqCalculator.calculateIAQIndex(sensorData);\r\n\r\n        // Prepare complete data object\r\n        const completeData = {\r\n          ...sensorData,\r\n          IAQ_INDEX: iaqResult.index,\r\n          IAQ_LEVEL: iaqResult.level,\r\n          IAQ_COMPONENTS: iaqResult.components,\r\n          timestamp: getCurrentTimestamp(),\r\n          location: 'Pathumwan, Bangkok' // You can make this configurable\r\n        };\r\n\r\n        this.currentData = completeData;\r\n        this.notifySubscribers(completeData);\r\n\r\n      } catch (error) {\r\n        console.error('Error in sensor monitoring:', error);\r\n      }\r\n    }, intervalMs);\r\n\r\n    console.log(`Sensor monitoring started with ${intervalMs}ms interval`);\r\n  }\r\n\r\n  async stopMonitoring() {\r\n    if (!this.isRunning) return;\r\n\r\n    this.isRunning = false;\r\n    \r\n    if (this.updateInterval) {\r\n      clearInterval(this.updateInterval);\r\n      this.updateInterval = null;\r\n    }\r\n\r\n    await modbusService.disconnect();\r\n    console.log('Sensor monitoring stopped');\r\n  }\r\n\r\n  getCurrentData() {\r\n    return this.currentData;\r\n  }\r\n}\r\n\r\nexport default new SensorService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}