{"ast":null,"code":"import io from 'socket.io-client';\nclass SensorService {\n  constructor() {\n    this.subscribers = [];\n    this.socket = null;\n    this.backendUrl = 'http://localhost:3001';\n    this.isConnected = false;\n    this.isSimulating = false;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.currentData = {\n      PM25: 16.60,\n      CO2: 656.53,\n      TEMPERATURE: 22.9,\n      HUMIDITY: 53.47,\n      TVOC: 328.01,\n      DIFFERENTIAL_PRESSURE: 4.03,\n      timestamp: Date.now(),\n      connectionStatus: {\n        connected: false,\n        simulation: true\n      }\n    };\n  }\n\n  // Initialize WebSocket connection\n  async connect() {\n    try {\n      console.log('üîå Connecting to backend...');\n      this.socket = io(this.backendUrl, {\n        autoConnect: true,\n        reconnection: true,\n        reconnectionAttempts: this.maxReconnectAttempts,\n        reconnectionDelay: 1000,\n        reconnectionDelayMax: 5000\n      });\n      this.setupSocketListeners();\n      return new Promise(resolve => {\n        this.socket.on('connect', () => {\n          console.log('‚úÖ Connected to backend');\n          this.isConnected = true;\n          this.reconnectAttempts = 0;\n          this.notifyConnectionStatus();\n          resolve(true);\n        });\n        this.socket.on('connect_error', error => {\n          console.warn('‚ö†Ô∏è Backend connection failed, using simulation:', error.message);\n          this.handleConnectionError();\n          resolve(false);\n        });\n      });\n    } catch (error) {\n      console.error('‚ùå Connection error:', error);\n      this.handleConnectionError();\n      return false;\n    }\n  }\n  setupSocketListeners() {\n    // Handle incoming sensor data\n    this.socket.on('sensorData', data => {\n      var _data$connectionStatu, _data$connectionStatu2;\n      const dataSource = (_data$connectionStatu = data.connectionStatus) !== null && _data$connectionStatu !== void 0 && _data$connectionStatu.simulation ? 'Backend simulation (Modbus disconnected)' : 'Real Modbus data + simulated pressure';\n      console.log(`üìä Received sensor data (${dataSource}):`, data);\n      this.currentData = {\n        ...data,\n        timestamp: Date.now()\n      };\n      this.isSimulating = ((_data$connectionStatu2 = data.connectionStatus) === null || _data$connectionStatu2 === void 0 ? void 0 : _data$connectionStatu2.simulation) || false;\n      this.notifySubscribers(this.currentData);\n    });\n\n    // Handle connection status updates\n    this.socket.on('connectionStatus', status => {\n      console.log('üì° Connection status:', status);\n      this.isConnected = status.connected;\n      this.isSimulating = status.simulation;\n      this.notifyConnectionStatus();\n    });\n\n    // Handle sensor errors\n    this.socket.on('sensorError', error => {\n      console.error('‚ùå Sensor error:', error);\n      this.notifySubscribers({\n        ...this.currentData,\n        error: error.error,\n        timestamp: Date.now()\n      });\n    });\n\n    // Handle disconnection\n    this.socket.on('disconnect', reason => {\n      console.warn('üîå Disconnected from backend:', reason);\n      this.isConnected = false;\n      this.handleConnectionError();\n    });\n\n    // Handle reconnection\n    this.socket.on('reconnect', attemptNumber => {\n      console.log(`‚úÖ Reconnected to backend (attempt ${attemptNumber})`);\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      this.notifyConnectionStatus();\n    });\n    this.socket.on('reconnect_error', error => {\n      this.reconnectAttempts++;\n      console.warn(`‚ö†Ô∏è Reconnection failed (${this.reconnectAttempts}/${this.maxReconnectAttempts}):`, error.message);\n      if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n        console.log('üé≠ Max reconnection attempts reached, switching to simulation');\n        this.handleConnectionError();\n      }\n    });\n  }\n  handleConnectionError() {\n    this.isConnected = false;\n    this.isSimulating = true;\n    this.startSimulationMode();\n    this.notifyConnectionStatus();\n  }\n  startSimulationMode() {\n    if (this.simulationInterval) {\n      clearInterval(this.simulationInterval);\n    }\n    console.log('üé≠ Starting frontend simulation mode (backend unavailable)');\n    console.log('üìä All sensor data simulated locally');\n\n    // Generate simulated data every 5 seconds\n    this.simulationInterval = setInterval(() => {\n      const simulatedData = this.generateSimulatedData();\n      this.currentData = simulatedData;\n      this.notifySubscribers(simulatedData);\n    }, 5000);\n  }\n  generateSimulatedData() {\n    // Base values matching your screenshot - used only when backend is unavailable\n    const baseData = {\n      PM25: 16.60,\n      CO2: 656.53,\n      TEMPERATURE: 22.9,\n      HUMIDITY: 53.47,\n      TVOC: 328.01,\n      DIFFERENTIAL_PRESSURE: 4.03\n    };\n\n    // Add realistic variations to all values\n    return {\n      PM25: Math.max(0, baseData.PM25 + (Math.random() - 0.5) * 2),\n      CO2: Math.max(300, baseData.CO2 + (Math.random() - 0.5) * 50),\n      TEMPERATURE: baseData.TEMPERATURE + (Math.random() - 0.5) * 1,\n      HUMIDITY: Math.max(0, Math.min(100, baseData.HUMIDITY + (Math.random() - 0.5) * 3)),\n      TVOC: Math.max(0, baseData.TVOC + (Math.random() - 0.5) * 20),\n      DIFFERENTIAL_PRESSURE: Math.max(0, baseData.DIFFERENTIAL_PRESSURE + (Math.random() - 0.5) * 0.5),\n      timestamp: Date.now(),\n      connectionStatus: {\n        connected: false,\n        simulation: true,\n        note: 'Frontend simulation (backend unavailable)'\n      }\n    };\n  }\n\n  // Subscribe to sensor data updates\n  subscribe(callback) {\n    this.subscribers.push(callback);\n\n    // Immediately send current data to new subscriber\n    callback(this.currentData);\n\n    // Return unsubscribe function\n    return () => {\n      this.subscribers = this.subscribers.filter(sub => sub !== callback);\n    };\n  }\n\n  // Notify all subscribers of data updates\n  notifySubscribers(data) {\n    this.subscribers.forEach(callback => {\n      try {\n        callback(data);\n      } catch (error) {\n        console.error('‚ùå Error in subscriber callback:', error);\n      }\n    });\n  }\n\n  // Notify subscribers of connection status changes\n  notifyConnectionStatus() {\n    const statusUpdate = {\n      ...this.currentData,\n      connectionStatus: {\n        connected: this.isConnected,\n        simulation: this.isSimulating\n      }\n    };\n    this.notifySubscribers(statusUpdate);\n  }\n\n  // Start monitoring sensors\n  async startMonitoring(interval = 5000) {\n    console.log('üîÑ Starting sensor monitoring...');\n\n    // Connect to backend\n    await this.connect();\n\n    // Request initial data\n    if (this.socket && this.isConnected) {\n      this.socket.emit('requestData');\n    }\n    console.log(`üìä Monitoring started (${interval}ms intervals)`);\n  }\n\n  // Stop monitoring\n  stopMonitoring() {\n    console.log('‚è∏Ô∏è Stopping sensor monitoring');\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    if (this.simulationInterval) {\n      clearInterval(this.simulationInterval);\n      this.simulationInterval = null;\n    }\n    this.isConnected = false;\n  }\n\n  // Manual refresh\n  async refreshData() {\n    if (this.socket && this.isConnected) {\n      console.log('üîÑ Requesting fresh sensor data...');\n      this.socket.emit('requestData');\n    } else {\n      console.log('üé≠ Generating fresh simulation data...');\n      const data = this.generateSimulatedData();\n      this.currentData = data;\n      this.notifySubscribers(data);\n    }\n  }\n\n  // Get current data\n  getCurrentData() {\n    return this.currentData;\n  }\n\n  // Get connection status\n  getConnectionStatus() {\n    return {\n      connected: this.isConnected,\n      simulation: this.isSimulating,\n      hasSocket: !!this.socket\n    };\n  }\n\n  // Force simulation mode\n  setSimulationMode(enabled) {\n    if (enabled && !this.isSimulating) {\n      console.log('üé≠ Switching to simulation mode');\n      this.isSimulating = true;\n      this.startSimulationMode();\n    } else if (!enabled && this.isSimulating) {\n      console.log('üì° Attempting to connect to real sensors');\n      if (this.simulationInterval) {\n        clearInterval(this.simulationInterval);\n        this.simulationInterval = null;\n      }\n      this.connect();\n    }\n  }\n\n  // Check if backend is available\n  async checkBackendHealth() {\n    try {\n      const response = await fetch(`${this.backendUrl}/api/health`);\n      const health = await response.json();\n      return health;\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Backend health check failed:', error.message);\n      return null;\n    }\n  }\n}\n\n// Export singleton instance\nconst sensorService = new SensorService();\nexport default sensorService;","map":{"version":3,"names":["io","SensorService","constructor","subscribers","socket","backendUrl","isConnected","isSimulating","reconnectAttempts","maxReconnectAttempts","currentData","PM25","CO2","TEMPERATURE","HUMIDITY","TVOC","DIFFERENTIAL_PRESSURE","timestamp","Date","now","connectionStatus","connected","simulation","connect","console","log","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","setupSocketListeners","Promise","resolve","on","notifyConnectionStatus","error","warn","message","handleConnectionError","data","_data$connectionStatu","_data$connectionStatu2","dataSource","notifySubscribers","status","reason","attemptNumber","startSimulationMode","simulationInterval","clearInterval","setInterval","simulatedData","generateSimulatedData","baseData","Math","max","random","min","note","subscribe","callback","push","filter","sub","forEach","statusUpdate","startMonitoring","interval","emit","stopMonitoring","disconnect","refreshData","getCurrentData","getConnectionStatus","hasSocket","setSimulationMode","enabled","checkBackendHealth","response","fetch","health","json","sensorService"],"sources":["/home/innovation/var/iaq-dashboard-project/frontend/src/services/sensorService.js"],"sourcesContent":["import io from 'socket.io-client';\n\nclass SensorService {\n  constructor() {\n    this.subscribers = [];\n    this.socket = null;\n    this.backendUrl = 'http://localhost:3001';\n    this.isConnected = false;\n    this.isSimulating = false;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.currentData = {\n      PM25: 16.60,\n      CO2: 656.53,\n      TEMPERATURE: 22.9,\n      HUMIDITY: 53.47,\n      TVOC: 328.01,\n      DIFFERENTIAL_PRESSURE: 4.03,\n      timestamp: Date.now(),\n      connectionStatus: {\n        connected: false,\n        simulation: true\n      }\n    };\n  }\n\n  // Initialize WebSocket connection\n  async connect() {\n    try {\n      console.log('üîå Connecting to backend...');\n      \n      this.socket = io(this.backendUrl, {\n        autoConnect: true,\n        reconnection: true,\n        reconnectionAttempts: this.maxReconnectAttempts,\n        reconnectionDelay: 1000,\n        reconnectionDelayMax: 5000\n      });\n\n      this.setupSocketListeners();\n      \n      return new Promise((resolve) => {\n        this.socket.on('connect', () => {\n          console.log('‚úÖ Connected to backend');\n          this.isConnected = true;\n          this.reconnectAttempts = 0;\n          this.notifyConnectionStatus();\n          resolve(true);\n        });\n\n        this.socket.on('connect_error', (error) => {\n          console.warn('‚ö†Ô∏è Backend connection failed, using simulation:', error.message);\n          this.handleConnectionError();\n          resolve(false);\n        });\n      });\n    } catch (error) {\n      console.error('‚ùå Connection error:', error);\n      this.handleConnectionError();\n      return false;\n    }\n  }\n\n  setupSocketListeners() {\n    // Handle incoming sensor data\n    this.socket.on('sensorData', (data) => {\n      const dataSource = data.connectionStatus?.simulation ? \n        'Backend simulation (Modbus disconnected)' : \n        'Real Modbus data + simulated pressure';\n      \n      console.log(`üìä Received sensor data (${dataSource}):`, data);\n      \n      this.currentData = {\n        ...data,\n        timestamp: Date.now()\n      };\n      this.isSimulating = data.connectionStatus?.simulation || false;\n      this.notifySubscribers(this.currentData);\n    });\n\n    // Handle connection status updates\n    this.socket.on('connectionStatus', (status) => {\n      console.log('üì° Connection status:', status);\n      this.isConnected = status.connected;\n      this.isSimulating = status.simulation;\n      this.notifyConnectionStatus();\n    });\n\n    // Handle sensor errors\n    this.socket.on('sensorError', (error) => {\n      console.error('‚ùå Sensor error:', error);\n      this.notifySubscribers({\n        ...this.currentData,\n        error: error.error,\n        timestamp: Date.now()\n      });\n    });\n\n    // Handle disconnection\n    this.socket.on('disconnect', (reason) => {\n      console.warn('üîå Disconnected from backend:', reason);\n      this.isConnected = false;\n      this.handleConnectionError();\n    });\n\n    // Handle reconnection\n    this.socket.on('reconnect', (attemptNumber) => {\n      console.log(`‚úÖ Reconnected to backend (attempt ${attemptNumber})`);\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      this.notifyConnectionStatus();\n    });\n\n    this.socket.on('reconnect_error', (error) => {\n      this.reconnectAttempts++;\n      console.warn(`‚ö†Ô∏è Reconnection failed (${this.reconnectAttempts}/${this.maxReconnectAttempts}):`, error.message);\n      \n      if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n        console.log('üé≠ Max reconnection attempts reached, switching to simulation');\n        this.handleConnectionError();\n      }\n    });\n  }\n\n  handleConnectionError() {\n    this.isConnected = false;\n    this.isSimulating = true;\n    this.startSimulationMode();\n    this.notifyConnectionStatus();\n  }\n\n  startSimulationMode() {\n    if (this.simulationInterval) {\n      clearInterval(this.simulationInterval);\n    }\n\n    console.log('üé≠ Starting frontend simulation mode (backend unavailable)');\n    console.log('üìä All sensor data simulated locally');\n    \n    // Generate simulated data every 5 seconds\n    this.simulationInterval = setInterval(() => {\n      const simulatedData = this.generateSimulatedData();\n      this.currentData = simulatedData;\n      this.notifySubscribers(simulatedData);\n    }, 5000);\n  }\n\n  generateSimulatedData() {\n    // Base values matching your screenshot - used only when backend is unavailable\n    const baseData = {\n      PM25: 16.60,\n      CO2: 656.53,\n      TEMPERATURE: 22.9,\n      HUMIDITY: 53.47,\n      TVOC: 328.01,\n      DIFFERENTIAL_PRESSURE: 4.03\n    };\n\n    // Add realistic variations to all values\n    return {\n      PM25: Math.max(0, baseData.PM25 + (Math.random() - 0.5) * 2),\n      CO2: Math.max(300, baseData.CO2 + (Math.random() - 0.5) * 50),\n      TEMPERATURE: baseData.TEMPERATURE + (Math.random() - 0.5) * 1,\n      HUMIDITY: Math.max(0, Math.min(100, baseData.HUMIDITY + (Math.random() - 0.5) * 3)),\n      TVOC: Math.max(0, baseData.TVOC + (Math.random() - 0.5) * 20),\n      DIFFERENTIAL_PRESSURE: Math.max(0, baseData.DIFFERENTIAL_PRESSURE + (Math.random() - 0.5) * 0.5),\n      timestamp: Date.now(),\n      connectionStatus: {\n        connected: false,\n        simulation: true,\n        note: 'Frontend simulation (backend unavailable)'\n      }\n    };\n  }\n\n  // Subscribe to sensor data updates\n  subscribe(callback) {\n    this.subscribers.push(callback);\n    \n    // Immediately send current data to new subscriber\n    callback(this.currentData);\n    \n    // Return unsubscribe function\n    return () => {\n      this.subscribers = this.subscribers.filter(sub => sub !== callback);\n    };\n  }\n\n  // Notify all subscribers of data updates\n  notifySubscribers(data) {\n    this.subscribers.forEach(callback => {\n      try {\n        callback(data);\n      } catch (error) {\n        console.error('‚ùå Error in subscriber callback:', error);\n      }\n    });\n  }\n\n  // Notify subscribers of connection status changes\n  notifyConnectionStatus() {\n    const statusUpdate = {\n      ...this.currentData,\n      connectionStatus: {\n        connected: this.isConnected,\n        simulation: this.isSimulating\n      }\n    };\n    this.notifySubscribers(statusUpdate);\n  }\n\n  // Start monitoring sensors\n  async startMonitoring(interval = 5000) {\n    console.log('üîÑ Starting sensor monitoring...');\n    \n    // Connect to backend\n    await this.connect();\n    \n    // Request initial data\n    if (this.socket && this.isConnected) {\n      this.socket.emit('requestData');\n    }\n    \n    console.log(`üìä Monitoring started (${interval}ms intervals)`);\n  }\n\n  // Stop monitoring\n  stopMonitoring() {\n    console.log('‚è∏Ô∏è Stopping sensor monitoring');\n    \n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    \n    if (this.simulationInterval) {\n      clearInterval(this.simulationInterval);\n      this.simulationInterval = null;\n    }\n    \n    this.isConnected = false;\n  }\n\n  // Manual refresh\n  async refreshData() {\n    if (this.socket && this.isConnected) {\n      console.log('üîÑ Requesting fresh sensor data...');\n      this.socket.emit('requestData');\n    } else {\n      console.log('üé≠ Generating fresh simulation data...');\n      const data = this.generateSimulatedData();\n      this.currentData = data;\n      this.notifySubscribers(data);\n    }\n  }\n\n  // Get current data\n  getCurrentData() {\n    return this.currentData;\n  }\n\n  // Get connection status\n  getConnectionStatus() {\n    return {\n      connected: this.isConnected,\n      simulation: this.isSimulating,\n      hasSocket: !!this.socket\n    };\n  }\n\n  // Force simulation mode\n  setSimulationMode(enabled) {\n    if (enabled && !this.isSimulating) {\n      console.log('üé≠ Switching to simulation mode');\n      this.isSimulating = true;\n      this.startSimulationMode();\n    } else if (!enabled && this.isSimulating) {\n      console.log('üì° Attempting to connect to real sensors');\n      if (this.simulationInterval) {\n        clearInterval(this.simulationInterval);\n        this.simulationInterval = null;\n      }\n      this.connect();\n    }\n  }\n\n  // Check if backend is available\n  async checkBackendHealth() {\n    try {\n      const response = await fetch(`${this.backendUrl}/api/health`);\n      const health = await response.json();\n      return health;\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Backend health check failed:', error.message);\n      return null;\n    }\n  }\n}\n\n// Export singleton instance\nconst sensorService = new SensorService();\nexport default sensorService;"],"mappings":"AAAA,OAAOA,EAAE,MAAM,kBAAkB;AAEjC,MAAMC,aAAa,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACC,UAAU,GAAG,uBAAuB;IACzC,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,YAAY,GAAG,KAAK;IACzB,IAAI,CAACC,iBAAiB,GAAG,CAAC;IAC1B,IAAI,CAACC,oBAAoB,GAAG,CAAC;IAC7B,IAAI,CAACC,WAAW,GAAG;MACjBC,IAAI,EAAE,KAAK;MACXC,GAAG,EAAE,MAAM;MACXC,WAAW,EAAE,IAAI;MACjBC,QAAQ,EAAE,KAAK;MACfC,IAAI,EAAE,MAAM;MACZC,qBAAqB,EAAE,IAAI;MAC3BC,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACrBC,gBAAgB,EAAE;QAChBC,SAAS,EAAE,KAAK;QAChBC,UAAU,EAAE;MACd;IACF,CAAC;EACH;;EAEA;EACA,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAE1C,IAAI,CAACrB,MAAM,GAAGJ,EAAE,CAAC,IAAI,CAACK,UAAU,EAAE;QAChCqB,WAAW,EAAE,IAAI;QACjBC,YAAY,EAAE,IAAI;QAClBC,oBAAoB,EAAE,IAAI,CAACnB,oBAAoB;QAC/CoB,iBAAiB,EAAE,IAAI;QACvBC,oBAAoB,EAAE;MACxB,CAAC,CAAC;MAEF,IAAI,CAACC,oBAAoB,CAAC,CAAC;MAE3B,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;QAC9B,IAAI,CAAC7B,MAAM,CAAC8B,EAAE,CAAC,SAAS,EAAE,MAAM;UAC9BV,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;UACrC,IAAI,CAACnB,WAAW,GAAG,IAAI;UACvB,IAAI,CAACE,iBAAiB,GAAG,CAAC;UAC1B,IAAI,CAAC2B,sBAAsB,CAAC,CAAC;UAC7BF,OAAO,CAAC,IAAI,CAAC;QACf,CAAC,CAAC;QAEF,IAAI,CAAC7B,MAAM,CAAC8B,EAAE,CAAC,eAAe,EAAGE,KAAK,IAAK;UACzCZ,OAAO,CAACa,IAAI,CAAC,iDAAiD,EAAED,KAAK,CAACE,OAAO,CAAC;UAC9E,IAAI,CAACC,qBAAqB,CAAC,CAAC;UAC5BN,OAAO,CAAC,KAAK,CAAC;QAChB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdZ,OAAO,CAACY,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,IAAI,CAACG,qBAAqB,CAAC,CAAC;MAC5B,OAAO,KAAK;IACd;EACF;EAEAR,oBAAoBA,CAAA,EAAG;IACrB;IACA,IAAI,CAAC3B,MAAM,CAAC8B,EAAE,CAAC,YAAY,EAAGM,IAAI,IAAK;MAAA,IAAAC,qBAAA,EAAAC,sBAAA;MACrC,MAAMC,UAAU,GAAG,CAAAF,qBAAA,GAAAD,IAAI,CAACpB,gBAAgB,cAAAqB,qBAAA,eAArBA,qBAAA,CAAuBnB,UAAU,GAClD,0CAA0C,GAC1C,uCAAuC;MAEzCE,OAAO,CAACC,GAAG,CAAC,4BAA4BkB,UAAU,IAAI,EAAEH,IAAI,CAAC;MAE7D,IAAI,CAAC9B,WAAW,GAAG;QACjB,GAAG8B,IAAI;QACPvB,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;MACtB,CAAC;MACD,IAAI,CAACZ,YAAY,GAAG,EAAAmC,sBAAA,GAAAF,IAAI,CAACpB,gBAAgB,cAAAsB,sBAAA,uBAArBA,sBAAA,CAAuBpB,UAAU,KAAI,KAAK;MAC9D,IAAI,CAACsB,iBAAiB,CAAC,IAAI,CAAClC,WAAW,CAAC;IAC1C,CAAC,CAAC;;IAEF;IACA,IAAI,CAACN,MAAM,CAAC8B,EAAE,CAAC,kBAAkB,EAAGW,MAAM,IAAK;MAC7CrB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEoB,MAAM,CAAC;MAC5C,IAAI,CAACvC,WAAW,GAAGuC,MAAM,CAACxB,SAAS;MACnC,IAAI,CAACd,YAAY,GAAGsC,MAAM,CAACvB,UAAU;MACrC,IAAI,CAACa,sBAAsB,CAAC,CAAC;IAC/B,CAAC,CAAC;;IAEF;IACA,IAAI,CAAC/B,MAAM,CAAC8B,EAAE,CAAC,aAAa,EAAGE,KAAK,IAAK;MACvCZ,OAAO,CAACY,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC,IAAI,CAACQ,iBAAiB,CAAC;QACrB,GAAG,IAAI,CAAClC,WAAW;QACnB0B,KAAK,EAAEA,KAAK,CAACA,KAAK;QAClBnB,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,IAAI,CAACf,MAAM,CAAC8B,EAAE,CAAC,YAAY,EAAGY,MAAM,IAAK;MACvCtB,OAAO,CAACa,IAAI,CAAC,+BAA+B,EAAES,MAAM,CAAC;MACrD,IAAI,CAACxC,WAAW,GAAG,KAAK;MACxB,IAAI,CAACiC,qBAAqB,CAAC,CAAC;IAC9B,CAAC,CAAC;;IAEF;IACA,IAAI,CAACnC,MAAM,CAAC8B,EAAE,CAAC,WAAW,EAAGa,aAAa,IAAK;MAC7CvB,OAAO,CAACC,GAAG,CAAC,qCAAqCsB,aAAa,GAAG,CAAC;MAClE,IAAI,CAACzC,WAAW,GAAG,IAAI;MACvB,IAAI,CAACE,iBAAiB,GAAG,CAAC;MAC1B,IAAI,CAAC2B,sBAAsB,CAAC,CAAC;IAC/B,CAAC,CAAC;IAEF,IAAI,CAAC/B,MAAM,CAAC8B,EAAE,CAAC,iBAAiB,EAAGE,KAAK,IAAK;MAC3C,IAAI,CAAC5B,iBAAiB,EAAE;MACxBgB,OAAO,CAACa,IAAI,CAAC,2BAA2B,IAAI,CAAC7B,iBAAiB,IAAI,IAAI,CAACC,oBAAoB,IAAI,EAAE2B,KAAK,CAACE,OAAO,CAAC;MAE/G,IAAI,IAAI,CAAC9B,iBAAiB,IAAI,IAAI,CAACC,oBAAoB,EAAE;QACvDe,OAAO,CAACC,GAAG,CAAC,+DAA+D,CAAC;QAC5E,IAAI,CAACc,qBAAqB,CAAC,CAAC;MAC9B;IACF,CAAC,CAAC;EACJ;EAEAA,qBAAqBA,CAAA,EAAG;IACtB,IAAI,CAACjC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,CAACyC,mBAAmB,CAAC,CAAC;IAC1B,IAAI,CAACb,sBAAsB,CAAC,CAAC;EAC/B;EAEAa,mBAAmBA,CAAA,EAAG;IACpB,IAAI,IAAI,CAACC,kBAAkB,EAAE;MAC3BC,aAAa,CAAC,IAAI,CAACD,kBAAkB,CAAC;IACxC;IAEAzB,OAAO,CAACC,GAAG,CAAC,4DAA4D,CAAC;IACzED,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;;IAEnD;IACA,IAAI,CAACwB,kBAAkB,GAAGE,WAAW,CAAC,MAAM;MAC1C,MAAMC,aAAa,GAAG,IAAI,CAACC,qBAAqB,CAAC,CAAC;MAClD,IAAI,CAAC3C,WAAW,GAAG0C,aAAa;MAChC,IAAI,CAACR,iBAAiB,CAACQ,aAAa,CAAC;IACvC,CAAC,EAAE,IAAI,CAAC;EACV;EAEAC,qBAAqBA,CAAA,EAAG;IACtB;IACA,MAAMC,QAAQ,GAAG;MACf3C,IAAI,EAAE,KAAK;MACXC,GAAG,EAAE,MAAM;MACXC,WAAW,EAAE,IAAI;MACjBC,QAAQ,EAAE,KAAK;MACfC,IAAI,EAAE,MAAM;MACZC,qBAAqB,EAAE;IACzB,CAAC;;IAED;IACA,OAAO;MACLL,IAAI,EAAE4C,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,QAAQ,CAAC3C,IAAI,GAAG,CAAC4C,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;MAC5D7C,GAAG,EAAE2C,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEF,QAAQ,CAAC1C,GAAG,GAAG,CAAC2C,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;MAC7D5C,WAAW,EAAEyC,QAAQ,CAACzC,WAAW,GAAG,CAAC0C,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;MAC7D3C,QAAQ,EAAEyC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACG,GAAG,CAAC,GAAG,EAAEJ,QAAQ,CAACxC,QAAQ,GAAG,CAACyC,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;MACnF1C,IAAI,EAAEwC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,QAAQ,CAACvC,IAAI,GAAG,CAACwC,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;MAC7DzC,qBAAqB,EAAEuC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,QAAQ,CAACtC,qBAAqB,GAAG,CAACuC,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC;MAChGxC,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACrBC,gBAAgB,EAAE;QAChBC,SAAS,EAAE,KAAK;QAChBC,UAAU,EAAE,IAAI;QAChBqC,IAAI,EAAE;MACR;IACF,CAAC;EACH;;EAEA;EACAC,SAASA,CAACC,QAAQ,EAAE;IAClB,IAAI,CAAC1D,WAAW,CAAC2D,IAAI,CAACD,QAAQ,CAAC;;IAE/B;IACAA,QAAQ,CAAC,IAAI,CAACnD,WAAW,CAAC;;IAE1B;IACA,OAAO,MAAM;MACX,IAAI,CAACP,WAAW,GAAG,IAAI,CAACA,WAAW,CAAC4D,MAAM,CAACC,GAAG,IAAIA,GAAG,KAAKH,QAAQ,CAAC;IACrE,CAAC;EACH;;EAEA;EACAjB,iBAAiBA,CAACJ,IAAI,EAAE;IACtB,IAAI,CAACrC,WAAW,CAAC8D,OAAO,CAACJ,QAAQ,IAAI;MACnC,IAAI;QACFA,QAAQ,CAACrB,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOJ,KAAK,EAAE;QACdZ,OAAO,CAACY,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD;IACF,CAAC,CAAC;EACJ;;EAEA;EACAD,sBAAsBA,CAAA,EAAG;IACvB,MAAM+B,YAAY,GAAG;MACnB,GAAG,IAAI,CAACxD,WAAW;MACnBU,gBAAgB,EAAE;QAChBC,SAAS,EAAE,IAAI,CAACf,WAAW;QAC3BgB,UAAU,EAAE,IAAI,CAACf;MACnB;IACF,CAAC;IACD,IAAI,CAACqC,iBAAiB,CAACsB,YAAY,CAAC;EACtC;;EAEA;EACA,MAAMC,eAAeA,CAACC,QAAQ,GAAG,IAAI,EAAE;IACrC5C,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;;IAE/C;IACA,MAAM,IAAI,CAACF,OAAO,CAAC,CAAC;;IAEpB;IACA,IAAI,IAAI,CAACnB,MAAM,IAAI,IAAI,CAACE,WAAW,EAAE;MACnC,IAAI,CAACF,MAAM,CAACiE,IAAI,CAAC,aAAa,CAAC;IACjC;IAEA7C,OAAO,CAACC,GAAG,CAAC,0BAA0B2C,QAAQ,eAAe,CAAC;EAChE;;EAEA;EACAE,cAAcA,CAAA,EAAG;IACf9C,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAE5C,IAAI,IAAI,CAACrB,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACmE,UAAU,CAAC,CAAC;MACxB,IAAI,CAACnE,MAAM,GAAG,IAAI;IACpB;IAEA,IAAI,IAAI,CAAC6C,kBAAkB,EAAE;MAC3BC,aAAa,CAAC,IAAI,CAACD,kBAAkB,CAAC;MACtC,IAAI,CAACA,kBAAkB,GAAG,IAAI;IAChC;IAEA,IAAI,CAAC3C,WAAW,GAAG,KAAK;EAC1B;;EAEA;EACA,MAAMkE,WAAWA,CAAA,EAAG;IAClB,IAAI,IAAI,CAACpE,MAAM,IAAI,IAAI,CAACE,WAAW,EAAE;MACnCkB,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjD,IAAI,CAACrB,MAAM,CAACiE,IAAI,CAAC,aAAa,CAAC;IACjC,CAAC,MAAM;MACL7C,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;MACrD,MAAMe,IAAI,GAAG,IAAI,CAACa,qBAAqB,CAAC,CAAC;MACzC,IAAI,CAAC3C,WAAW,GAAG8B,IAAI;MACvB,IAAI,CAACI,iBAAiB,CAACJ,IAAI,CAAC;IAC9B;EACF;;EAEA;EACAiC,cAAcA,CAAA,EAAG;IACf,OAAO,IAAI,CAAC/D,WAAW;EACzB;;EAEA;EACAgE,mBAAmBA,CAAA,EAAG;IACpB,OAAO;MACLrD,SAAS,EAAE,IAAI,CAACf,WAAW;MAC3BgB,UAAU,EAAE,IAAI,CAACf,YAAY;MAC7BoE,SAAS,EAAE,CAAC,CAAC,IAAI,CAACvE;IACpB,CAAC;EACH;;EAEA;EACAwE,iBAAiBA,CAACC,OAAO,EAAE;IACzB,IAAIA,OAAO,IAAI,CAAC,IAAI,CAACtE,YAAY,EAAE;MACjCiB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9C,IAAI,CAAClB,YAAY,GAAG,IAAI;MACxB,IAAI,CAACyC,mBAAmB,CAAC,CAAC;IAC5B,CAAC,MAAM,IAAI,CAAC6B,OAAO,IAAI,IAAI,CAACtE,YAAY,EAAE;MACxCiB,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;MACvD,IAAI,IAAI,CAACwB,kBAAkB,EAAE;QAC3BC,aAAa,CAAC,IAAI,CAACD,kBAAkB,CAAC;QACtC,IAAI,CAACA,kBAAkB,GAAG,IAAI;MAChC;MACA,IAAI,CAAC1B,OAAO,CAAC,CAAC;IAChB;EACF;;EAEA;EACA,MAAMuD,kBAAkBA,CAAA,EAAG;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAAC3E,UAAU,aAAa,CAAC;MAC7D,MAAM4E,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACpC,OAAOD,MAAM;IACf,CAAC,CAAC,OAAO7C,KAAK,EAAE;MACdZ,OAAO,CAACa,IAAI,CAAC,iCAAiC,EAAED,KAAK,CAACE,OAAO,CAAC;MAC9D,OAAO,IAAI;IACb;EACF;AACF;;AAEA;AACA,MAAM6C,aAAa,GAAG,IAAIlF,aAAa,CAAC,CAAC;AACzC,eAAekF,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}