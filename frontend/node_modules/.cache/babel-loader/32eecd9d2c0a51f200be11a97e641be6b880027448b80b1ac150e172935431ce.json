{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) 2015, Yaacov Zamir <kobi.zamir@gmail.com>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF  THIS SOFTWARE.\n */\nconst MIN_MODBUSRTU_FRAMESZ = 5;\n\n/**\n * Adds connection shorthand API to a Modbus objext\n *\n * @param {ModbusRTU} Modbus the ModbusRTU object.\n */\nconst addConnctionAPI = function (Modbus) {\n  const cl = Modbus.prototype;\n  const open = function (obj, next) {\n    /* the function check for a callback\n     * if we have a callback, use it\n     * o/w build a promise.\n     */\n    if (next) {\n      // if we have a callback, use the callback\n      obj.open(next);\n    } else {\n      // o/w use  a promise\n      return new Promise(function (resolve, reject) {\n        function cb(err) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        }\n        obj.open(cb);\n      });\n    }\n  };\n\n  /**\n   * Connect to a communication port, using SerialPort.\n   *\n   * @param {string} path the path to the Serial Port - required.\n   * @param {Object} options - the serial port options - optional.\n   * @param {Function} next the function to call next.\n   */\n  cl.connectRTU = function (path, options, next) {\n    if (options) {\n      this._enron = options.enron;\n      this._enronTables = options.enronTables;\n    }\n\n    // check if we have options\n    if (typeof next === \"undefined\" && typeof options === \"function\") {\n      next = options;\n      options = {};\n    }\n\n    // check if we have options\n    if (typeof options === \"undefined\") {\n      options = {};\n    }\n\n    // disable auto open, as we handle the open\n    options.autoOpen = false;\n    // set vmin to smallest modbus packet size\n    options.platformOptions = {\n      vmin: MIN_MODBUSRTU_FRAMESZ,\n      vtime: 0\n    };\n\n    // create the SerialPort\n    const SerialPort = require(\"serialport\").SerialPort;\n    this._port = new SerialPort(Object.assign({}, {\n      path\n    }, options));\n\n    // open and call next\n    return open(this, next);\n  };\n\n  /**\n   * Connect to a communication port, using TcpPort.\n   *\n   * @param {string} ip the ip of the TCP Port - required.\n   * @param {Object} options - the TCP port options - optional.\n   * @param {Function} next the function to call next.\n   */\n  cl.connectTCP = function (ip, options, next) {\n    if (options) {\n      this._enron = options.enron;\n      this._enronTables = options.enronTables;\n    }\n\n    // check if we have options\n    if (typeof next === \"undefined\" && typeof options === \"function\") {\n      next = options;\n      options = {};\n    }\n\n    // check if we have options\n    if (typeof options === \"undefined\") {\n      options = {};\n    }\n\n    // create the TcpPort\n    const TcpPort = require(\"../ports/tcpport\");\n    if (this._timeout) {\n      options.timeout = this._timeout;\n    }\n    this._port = new TcpPort(ip, options);\n\n    // open and call next\n    return open(this, next);\n  };\n\n  /**\n   * Setup a communication port with existing socket, using TcpPort.\n   *\n   * @param {string} socket the instance of the net.Socket - required.\n   * @param {Object} options - the TCP port options - optional.\n   * @param {Function} next the function to call next.\n   */\n  cl.linkTCP = function (socket, options, next) {\n    // check if we have options\n    if (typeof next === \"undefined\" && typeof options === \"function\") {\n      next = options;\n      options = {};\n    }\n\n    // check if we have options\n    if (typeof options === \"undefined\") {\n      options = {};\n    }\n    options.socket = socket;\n\n    // create the TcpPort\n    const TcpPort = require(\"../ports/tcpport\");\n    if (this._timeout) {\n      options.timeout = this._timeout;\n    }\n    this._port = new TcpPort(options);\n\n    // open and call next\n    return open(this, next);\n  };\n\n  /**\n   * Connect to a communication port, using TcpRTUBufferedPort.\n   *\n   * @param {string} ip the ip of the TCP Port - required.\n   * @param {Object} options - the serial tcp port options - optional.\n   * @param {Function} next the function to call next.\n   */\n  cl.connectTcpRTUBuffered = function (ip, options, next) {\n    // check if we have options\n    if (typeof next === \"undefined\" && typeof options === \"function\") {\n      next = options;\n      options = {};\n    }\n\n    // check if we have options\n    if (typeof options === \"undefined\") {\n      options = {};\n    }\n    const TcpRTUBufferedPort = require(\"../ports/tcprtubufferedport\");\n    if (this._timeout) {\n      options.timeout = this._timeout;\n    }\n    this._port = new TcpRTUBufferedPort(ip, options);\n\n    // open and call next\n    return open(this, next);\n  };\n  cl.linkTcpRTUBuffered = function (socket, options, next) {\n    // check if we have options\n    if (typeof next === \"undefined\" && typeof options === \"function\") {\n      next = options;\n      options = {};\n    }\n\n    // check if we have options\n    if (typeof options === \"undefined\") {\n      options = {};\n    }\n    options.socket = socket;\n\n    // create the TcpPort\n    const TcpRTUBufferedPort = require(\"../ports/tcprtubufferedport\");\n    if (this._timeout) {\n      options.timeout = this._timeout;\n    }\n    this._port = new TcpRTUBufferedPort(options);\n\n    // open and call next\n    return open(this, next);\n  };\n\n  /**\n   * Connect to a communication port, using TelnetPort.\n   *\n   * @param {string} ip the ip of the TelnetPort - required.\n   * @param {Object} options - the serial port options - optional.\n   * @param {Function} next the function to call next.\n   */\n  cl.connectTelnet = function (ip, options, next) {\n    // check if we have options\n    if (typeof next === \"undefined\" && typeof options === \"function\") {\n      next = options;\n      options = {};\n    }\n\n    // check if we have options\n    if (typeof options === \"undefined\") {\n      options = {};\n    }\n\n    // create the TcpPort\n    const TelnetPort = require(\"../ports/telnetport\");\n    if (this._timeout) {\n      options.timeout = this._timeout;\n    }\n    this._port = new TelnetPort(ip, options);\n\n    // open and call next\n    return open(this, next);\n  };\n  cl.linkTelnet = function (socket, options, next) {\n    // check if we have options\n    if (typeof next === \"undefined\" && typeof options === \"function\") {\n      next = options;\n      options = {};\n    }\n\n    // check if we have options\n    if (typeof options === \"undefined\") {\n      options = {};\n    }\n    options.socket = socket;\n\n    // create the TcpPort\n    const TelnetPort = require(\"../ports/telnetport\");\n    if (this._timeout) {\n      options.timeout = this._timeout;\n    }\n    this._port = new TelnetPort(options);\n\n    // open and call next\n    return open(this, next);\n  };\n\n  /**\n   * Connect to a communication port, using C701 UDP-to-Serial bridge.\n   *\n   * @param {string} ip the ip of the TelnetPort - required.\n   * @param {Object} options - the serial port options - optional.\n   * @param {Function} next the function to call next.\n   */\n  cl.connectC701 = function (ip, options, next) {\n    // check if we have options\n    if (typeof next === \"undefined\" && typeof options === \"function\") {\n      next = options;\n      options = {};\n    }\n\n    // check if we have options\n    if (typeof options === \"undefined\") {\n      options = {};\n    }\n\n    // create the TcpPort\n    const C701Port = require(\"../ports/c701port\");\n    this._port = new C701Port(ip, options);\n\n    // open and call next\n    return open(this, next);\n  };\n\n  /**\n   * Connect to a communication port, using modbus-udp.\n   *\n   * @param {string} ip the ip of the UDP Port - required.\n   * @param {Object} options - the serial port options - optional.\n   * @param {Function} next the function to call next.\n   */\n  cl.connectUDP = function (ip, options, next) {\n    // check if we have options\n    if (typeof next === \"undefined\" && typeof options === \"function\") {\n      next = options;\n      options = {};\n    }\n\n    // check if we have options\n    if (typeof options === \"undefined\") {\n      options = {};\n    }\n\n    // create the UdpPort\n    const UdpPort = require(\"../ports/udpport\");\n    this._port = new UdpPort(ip, options);\n\n    // open and call next\n    return open(this, next);\n  };\n\n  /**\n   * Connect to a communication port, using Bufferd Serial port.\n   *\n   * @param {string} path the path to the Serial Port - required.\n   * @param {Object} options - the serial port options - optional.\n   * @param {Function} next the function to call next.\n   */\n  cl.connectRTUBuffered = function (path, options, next) {\n    if (options) {\n      this._enron = options.enron;\n      this._enronTables = options.enronTables;\n    }\n\n    // check if we have options\n    if (typeof next === \"undefined\" && typeof options === \"function\") {\n      next = options;\n      options = {};\n    }\n\n    // check if we have options\n    if (typeof options === \"undefined\") {\n      options = {};\n    }\n\n    // create the SerialPort\n    const SerialPort = require(\"../ports/rtubufferedport\");\n    this._port = new SerialPort(path, options);\n\n    // set vmin to smallest modbus packet size\n    options.platformOptions = {\n      vmin: MIN_MODBUSRTU_FRAMESZ,\n      vtime: 0\n    };\n\n    // open and call next\n    return open(this, next);\n  };\n\n  /**\n   * Connect to a communication port, using ASCII Serial port.\n   *\n   * @param {string} path the path to the Serial Port - required.\n   * @param {Object} options - the serial port options - optional.\n   * @param {Function} next the function to call next.\n   */\n  cl.connectAsciiSerial = function (path, options, next) {\n    // check if we have options\n    if (typeof next === \"undefined\" && typeof options === \"function\") {\n      next = options;\n      options = {};\n    }\n\n    // check if we have options\n    if (typeof options === \"undefined\") {\n      options = {};\n    }\n\n    // create the ASCII SerialPort\n    const SerialPortAscii = require(\"../ports/asciiport\");\n    this._port = new SerialPortAscii(path, options);\n\n    // open and call next\n    return open(this, next);\n  };\n\n  /**\n   * Connect to existing client socket.\n   *\n   * @param {socket} socket the socket to connect to - required.\n   * @param {Function} next the function to call next.\n   */\n  cl.connectRTUSocket = function (socket, next) {\n    const thisModbus = this;\n    this._port = socket;\n    this._port.open = function (callback) {\n      // existing socket is already connected\n      thisModbus._port.isOpen = true;\n      callback();\n    };\n\n    // open and call next\n    return open(this, next);\n  };\n\n  /**\n   * Connect to existing client socket.\n   *\n   * @param {socket} socket the socket to connect to - required.\n   * @param {Function} next the function to call next.\n   */\n  cl.connectBle = function (options, next) {\n    // check if we have options\n    if (typeof next === \"undefined\" && typeof options === \"function\") {\n      next = options;\n      options = {};\n    }\n\n    // check if we have options\n    if (typeof options === \"undefined\") {\n      options = {};\n    }\n\n    // create the TcpPort\n    const BlePort = require(\"../ports/bleport\");\n    if (this._timeout) {\n      options.timeout = this._timeout;\n    }\n    this._port = new BlePort(options);\n\n    // open and call next\n    return open(this, next);\n  };\n};\n\n/**\n * Connection API Modbus.\n *\n * @type {addConnctionAPI}\n */\nmodule.exports = addConnctionAPI;","map":{"version":3,"names":["MIN_MODBUSRTU_FRAMESZ","addConnctionAPI","Modbus","cl","prototype","open","obj","next","Promise","resolve","reject","cb","err","connectRTU","path","options","_enron","enron","_enronTables","enronTables","autoOpen","platformOptions","vmin","vtime","SerialPort","require","_port","Object","assign","connectTCP","ip","TcpPort","_timeout","timeout","linkTCP","socket","connectTcpRTUBuffered","TcpRTUBufferedPort","linkTcpRTUBuffered","connectTelnet","TelnetPort","linkTelnet","connectC701","C701Port","connectUDP","UdpPort","connectRTUBuffered","connectAsciiSerial","SerialPortAscii","connectRTUSocket","thisModbus","callback","isOpen","connectBle","BlePort","module","exports"],"sources":["D:/code projects/iaq-dashboard/node_modules/modbus-serial/apis/connection.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) 2015, Yaacov Zamir <kobi.zamir@gmail.com>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF  THIS SOFTWARE.\n */\n\nconst MIN_MODBUSRTU_FRAMESZ = 5;\n\n/**\n * Adds connection shorthand API to a Modbus objext\n *\n * @param {ModbusRTU} Modbus the ModbusRTU object.\n */\nconst addConnctionAPI = function(Modbus) {\n    const cl = Modbus.prototype;\n\n    const open = function(obj, next) {\n        /* the function check for a callback\n         * if we have a callback, use it\n         * o/w build a promise.\n         */\n        if (next) {\n            // if we have a callback, use the callback\n            obj.open(next);\n        } else {\n            // o/w use  a promise\n            return new Promise(function(resolve, reject) {\n                function cb(err) {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve();\n                    }\n                }\n\n                obj.open(cb);\n            });\n        }\n    };\n\n    /**\n     * Connect to a communication port, using SerialPort.\n     *\n     * @param {string} path the path to the Serial Port - required.\n     * @param {Object} options - the serial port options - optional.\n     * @param {Function} next the function to call next.\n     */\n    cl.connectRTU = function(path, options, next) {\n        if (options) {\n            this._enron = options.enron;\n            this._enronTables = options.enronTables;\n        }\n\n        // check if we have options\n        if (typeof next === \"undefined\" && typeof options === \"function\") {\n            next = options;\n            options = {};\n        }\n\n        // check if we have options\n        if (typeof options === \"undefined\") {\n            options = {};\n        }\n\n        // disable auto open, as we handle the open\n        options.autoOpen = false;\n        // set vmin to smallest modbus packet size\n        options.platformOptions = { vmin: MIN_MODBUSRTU_FRAMESZ, vtime: 0 };\n\n        // create the SerialPort\n        const SerialPort = require(\"serialport\").SerialPort;\n        this._port = new SerialPort(Object.assign({}, { path }, options));\n\n        // open and call next\n        return open(this, next);\n    };\n\n    /**\n     * Connect to a communication port, using TcpPort.\n     *\n     * @param {string} ip the ip of the TCP Port - required.\n     * @param {Object} options - the TCP port options - optional.\n     * @param {Function} next the function to call next.\n     */\n    cl.connectTCP = function(ip, options, next) {\n        if (options) {\n            this._enron = options.enron;\n            this._enronTables = options.enronTables;\n        }\n\n        // check if we have options\n        if (typeof next === \"undefined\" && typeof options === \"function\") {\n            next = options;\n            options = {};\n        }\n\n        // check if we have options\n        if (typeof options === \"undefined\") {\n            options = {};\n        }\n\n        // create the TcpPort\n        const TcpPort = require(\"../ports/tcpport\");\n        if (this._timeout) {\n            options.timeout = this._timeout;\n        }\n        this._port = new TcpPort(ip, options);\n\n        // open and call next\n        return open(this, next);\n    };\n\n    /**\n     * Setup a communication port with existing socket, using TcpPort.\n     *\n     * @param {string} socket the instance of the net.Socket - required.\n     * @param {Object} options - the TCP port options - optional.\n     * @param {Function} next the function to call next.\n     */\n    cl.linkTCP = function(socket, options, next) {\n        // check if we have options\n        if (typeof next === \"undefined\" && typeof options === \"function\") {\n            next = options;\n            options = {};\n        }\n\n        // check if we have options\n        if (typeof options === \"undefined\") {\n            options = {};\n        }\n\n        options.socket = socket;\n\n        // create the TcpPort\n        const TcpPort = require(\"../ports/tcpport\");\n        if (this._timeout) {\n            options.timeout = this._timeout;\n        }\n        this._port = new TcpPort(options);\n\n        // open and call next\n        return open(this, next);\n    };\n\n    /**\n     * Connect to a communication port, using TcpRTUBufferedPort.\n     *\n     * @param {string} ip the ip of the TCP Port - required.\n     * @param {Object} options - the serial tcp port options - optional.\n     * @param {Function} next the function to call next.\n     */\n    cl.connectTcpRTUBuffered = function(ip, options, next) {\n        // check if we have options\n        if (typeof next === \"undefined\" && typeof options === \"function\") {\n            next = options;\n            options = {};\n        }\n\n        // check if we have options\n        if (typeof options === \"undefined\") {\n            options = {};\n        }\n\n        const TcpRTUBufferedPort = require(\"../ports/tcprtubufferedport\");\n        if (this._timeout) {\n            options.timeout = this._timeout;\n        }\n        this._port = new TcpRTUBufferedPort(ip, options);\n\n        // open and call next\n        return open(this, next);\n    };\n    cl.linkTcpRTUBuffered = function(socket, options, next) {\n        // check if we have options\n        if (typeof next === \"undefined\" && typeof options === \"function\") {\n            next = options;\n            options = {};\n        }\n\n        // check if we have options\n        if (typeof options === \"undefined\") {\n            options = {};\n        }\n\n        options.socket = socket;\n\n        // create the TcpPort\n        const TcpRTUBufferedPort = require(\"../ports/tcprtubufferedport\");\n        if (this._timeout) {\n            options.timeout = this._timeout;\n        }\n        this._port = new TcpRTUBufferedPort(options);\n\n        // open and call next\n        return open(this, next);\n    };\n\n    /**\n     * Connect to a communication port, using TelnetPort.\n     *\n     * @param {string} ip the ip of the TelnetPort - required.\n     * @param {Object} options - the serial port options - optional.\n     * @param {Function} next the function to call next.\n     */\n    cl.connectTelnet = function(ip, options, next) {\n        // check if we have options\n        if (typeof next === \"undefined\" && typeof options === \"function\") {\n            next = options;\n            options = {};\n        }\n\n        // check if we have options\n        if (typeof options === \"undefined\") {\n            options = {};\n        }\n\n        // create the TcpPort\n        const TelnetPort = require(\"../ports/telnetport\");\n        if (this._timeout) {\n            options.timeout = this._timeout;\n        }\n        this._port = new TelnetPort(ip, options);\n\n        // open and call next\n        return open(this, next);\n    };\n    cl.linkTelnet = function(socket, options, next) {\n        // check if we have options\n        if (typeof next === \"undefined\" && typeof options === \"function\") {\n            next = options;\n            options = {};\n        }\n\n        // check if we have options\n        if (typeof options === \"undefined\") {\n            options = {};\n        }\n\n        options.socket = socket;\n\n        // create the TcpPort\n        const TelnetPort = require(\"../ports/telnetport\");\n        if (this._timeout) {\n            options.timeout = this._timeout;\n        }\n        this._port = new TelnetPort(options);\n\n        // open and call next\n        return open(this, next);\n    };\n\n    /**\n     * Connect to a communication port, using C701 UDP-to-Serial bridge.\n     *\n     * @param {string} ip the ip of the TelnetPort - required.\n     * @param {Object} options - the serial port options - optional.\n     * @param {Function} next the function to call next.\n     */\n    cl.connectC701 = function(ip, options, next) {\n        // check if we have options\n        if (typeof next === \"undefined\" && typeof options === \"function\") {\n            next = options;\n            options = {};\n        }\n\n        // check if we have options\n        if (typeof options === \"undefined\") {\n            options = {};\n        }\n\n        // create the TcpPort\n        const C701Port = require(\"../ports/c701port\");\n        this._port = new C701Port(ip, options);\n\n        // open and call next\n        return open(this, next);\n    };\n\n    /**\n     * Connect to a communication port, using modbus-udp.\n     *\n     * @param {string} ip the ip of the UDP Port - required.\n     * @param {Object} options - the serial port options - optional.\n     * @param {Function} next the function to call next.\n     */\n    cl.connectUDP = function(ip, options, next) {\n        // check if we have options\n        if (typeof next === \"undefined\" && typeof options === \"function\") {\n            next = options;\n            options = {};\n        }\n\n        // check if we have options\n        if (typeof options === \"undefined\") {\n            options = {};\n        }\n\n        // create the UdpPort\n        const UdpPort = require(\"../ports/udpport\");\n        this._port = new UdpPort(ip, options);\n\n        // open and call next\n        return open(this, next);\n    };\n\n    /**\n     * Connect to a communication port, using Bufferd Serial port.\n     *\n     * @param {string} path the path to the Serial Port - required.\n     * @param {Object} options - the serial port options - optional.\n     * @param {Function} next the function to call next.\n     */\n    cl.connectRTUBuffered = function(path, options, next) {\n        if (options) {\n            this._enron = options.enron;\n            this._enronTables = options.enronTables;\n        }\n\n        // check if we have options\n        if (typeof next === \"undefined\" && typeof options === \"function\") {\n            next = options;\n            options = {};\n        }\n\n        // check if we have options\n        if (typeof options === \"undefined\") {\n            options = {};\n        }\n\n        // create the SerialPort\n        const SerialPort = require(\"../ports/rtubufferedport\");\n        this._port = new SerialPort(path, options);\n\n        // set vmin to smallest modbus packet size\n        options.platformOptions = { vmin: MIN_MODBUSRTU_FRAMESZ, vtime: 0 };\n\n        // open and call next\n        return open(this, next);\n    };\n\n    /**\n     * Connect to a communication port, using ASCII Serial port.\n     *\n     * @param {string} path the path to the Serial Port - required.\n     * @param {Object} options - the serial port options - optional.\n     * @param {Function} next the function to call next.\n     */\n    cl.connectAsciiSerial = function(path, options, next) {\n        // check if we have options\n        if (typeof next === \"undefined\" && typeof options === \"function\") {\n            next = options;\n            options = {};\n        }\n\n        // check if we have options\n        if (typeof options === \"undefined\") {\n            options = {};\n        }\n\n        // create the ASCII SerialPort\n        const SerialPortAscii = require(\"../ports/asciiport\");\n        this._port = new SerialPortAscii(path, options);\n\n        // open and call next\n        return open(this, next);\n    };\n\n    /**\n     * Connect to existing client socket.\n     *\n     * @param {socket} socket the socket to connect to - required.\n     * @param {Function} next the function to call next.\n     */\n    cl.connectRTUSocket = function(socket, next) {\n        const thisModbus = this;\n        this._port = socket;\n        this._port.open = function(callback) {\n            // existing socket is already connected\n            thisModbus._port.isOpen = true;\n            callback();\n        };\n\n        // open and call next\n        return open(this, next);\n    };\n\n    /**\n     * Connect to existing client socket.\n     *\n     * @param {socket} socket the socket to connect to - required.\n     * @param {Function} next the function to call next.\n     */\n    cl.connectBle = function(options, next) {\n        // check if we have options\n        if (typeof next === \"undefined\" && typeof options === \"function\") {\n            next = options;\n            options = {};\n        }\n\n        // check if we have options\n        if (typeof options === \"undefined\") {\n            options = {};\n        }\n\n        // create the TcpPort\n        const BlePort = require(\"../ports/bleport\");\n        if (this._timeout) {\n            options.timeout = this._timeout;\n        }\n        this._port = new BlePort(options);\n\n        // open and call next\n        return open(this, next);\n    };\n};\n\n/**\n * Connection API Modbus.\n *\n * @type {addConnctionAPI}\n */\nmodule.exports = addConnctionAPI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}