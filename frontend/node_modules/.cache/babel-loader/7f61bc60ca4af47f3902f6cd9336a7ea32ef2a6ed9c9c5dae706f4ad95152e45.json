{"ast":null,"code":"/* globals navigator */\n\n\"use strict\";\n\nconst {\n  EventEmitter\n} = require(\"events\");\nconst debug = require(\"debug\")(\"modbus-serial\");\n\n/**\n * Bluetooth Low Energy port for Modbus.\n */\nclass BlePort extends EventEmitter {\n  constructor(options) {\n    super();\n    if (typeof options === \"undefined\") options = {};\n    this._bluetooth = options.bluetooth || navigator.bluetooth;\n    this._txServiceUuid = options.txService;\n    this._txCharacteristicUuid = options.txCharacteristic;\n    this._rxServiceUuid = options.rxService;\n    this._rxCharacteristicUuid = options.rxCharacteristic;\n    this._boundHandleDisconnection = this._handleDisconnection.bind(this);\n    this._boundHandleCharacteristicValueChanged = this._handleCharacteristicValueChanged.bind(this);\n  }\n  get isOpen() {\n    return Boolean(this._device) && this._device.gatt.connected;\n  }\n  async open(callback) {\n    let error;\n    try {\n      const options = {\n        filters: [{\n          services: [this._txServiceUuid]\n        }],\n        optionalServices: [this._txServiceUuid, this._rxServiceUuid]\n      };\n      debug({\n        action: \"requesting BLE device\",\n        options\n      });\n      this._device = await this._bluetooth.requestDevice(options);\n      debug({\n        action: \"BLE device connected\",\n        name: this._device.name,\n        id: this._device.id\n      });\n      this._device.addEventListener(\"gattserverdisconnected\", this._boundHandleDisconnection);\n      debug({\n        action: \"Connecting to GATT server\"\n      });\n      this._server = await this._device.gatt.connect();\n      debug({\n        action: \"GATT server connected\"\n      });\n      debug({\n        action: \"Getting TX service\",\n        uuid: this._txServiceUuid\n      });\n      this._txService = await this._server.getPrimaryService(this._txServiceUuid);\n      debug({\n        action: \"TX service found\"\n      });\n      debug({\n        action: \"Getting TX characteristic\",\n        uuid: this._txCharacteristicUuid\n      });\n      this._txCharacteristic = await this._txService.getCharacteristic(this._txCharacteristicUuid);\n      debug({\n        action: \"TX characteristic found\"\n      });\n      debug({\n        action: \"Getting RX service\",\n        uuid: this._rxServiceUuid\n      });\n      this._rxService = await this._server.getPrimaryService(this._rxServiceUuid);\n      debug({\n        action: \"RX service found\"\n      });\n      debug({\n        action: \"Getting RX characteristic\",\n        uuid: this._rxCharacteristicUuid\n      });\n      this._rxCharacteristic = await this._rxService.getCharacteristic(this._rxCharacteristicUuid);\n      debug({\n        action: \"RX characteristic found\"\n      });\n      debug({\n        action: \"Starting RX notifications\"\n      });\n      await this._rxCharacteristic.startNotifications();\n      debug({\n        action: \"RX notifications started\"\n      });\n      this._rxCharacteristic.addEventListener(\"characteristicvaluechanged\", this._boundHandleCharacteristicValueChanged);\n    } catch (_error) {\n      error = _error;\n    }\n    if (callback) {\n      callback(error);\n    }\n  }\n  async close(callback) {\n    let error;\n    try {\n      if (this._rxCharacteristic) {\n        debug({\n          action: \"Stopping RX notifications\"\n        });\n        await this._rxCharacteristic.stopNotifications();\n        debug({\n          action: \"RX notifications stopped\"\n        });\n        this._rxCharacteristic.removeEventListener(\"characteristicvaluechanged\", this._boundHandleCharacteristicValueChanged);\n      }\n      if (this._device) {\n        debug({\n          action: \"Disconnecting from GATT server\"\n        });\n        this._device.removeEventListener(\"gattserverdisconnected\", this._boundHandleDisconnection);\n        if (this._device.gatt.connected) {\n          this._device.gatt.disconnect();\n          debug({\n            action: \"GATT server disconnected\"\n          });\n        } else {\n          debug({\n            action: \"GATT server is already disconnected\"\n          });\n        }\n      }\n    } catch (_error) {\n      error = _error;\n    }\n    if (callback) {\n      callback(error);\n    }\n  }\n\n  /**\n   * Writes raw data to the TX characteristic.\n   * @param {Buffer} data\n   * @returns {Promise}\n   */\n  async write(data) {\n    debug({\n      action: \"Writing to TX characteristic\",\n      data\n    });\n    await this._txCharacteristic.writeValue(BlePort._bufferToArrayBuffer(data));\n  }\n  _handleDisconnection() {\n    debug({\n      action: \"GATT server disconnected\"\n    });\n    this.emit(\"close\");\n  }\n\n  /**\n   * Handles a received GATT value change event.\n   * @param event\n   * @private\n   */\n  _handleCharacteristicValueChanged(event) {\n    const dataView = event.target.value;\n    const buffer = Buffer.from(dataView.buffer, dataView.byteOffset, dataView.byteLength);\n    debug({\n      action: \"RX characteristic changed\",\n      buffer\n    });\n    this.emit(\"data\", buffer);\n  }\n\n  /**\n   * Converts a Node.js `Buffer` to an `ArrayBuffer`.\n   * @param {Buffer} buffer\n   * @returns {ArrayBuffer}\n   * @private\n   */\n  static _bufferToArrayBuffer(buffer) {\n    return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n  }\n}\nmodule.exports = BlePort;","map":{"version":3,"names":["EventEmitter","require","debug","BlePort","constructor","options","_bluetooth","bluetooth","navigator","_txServiceUuid","txService","_txCharacteristicUuid","txCharacteristic","_rxServiceUuid","rxService","_rxCharacteristicUuid","rxCharacteristic","_boundHandleDisconnection","_handleDisconnection","bind","_boundHandleCharacteristicValueChanged","_handleCharacteristicValueChanged","isOpen","Boolean","_device","gatt","connected","open","callback","error","filters","services","optionalServices","action","requestDevice","name","id","addEventListener","_server","connect","uuid","_txService","getPrimaryService","_txCharacteristic","getCharacteristic","_rxService","_rxCharacteristic","startNotifications","_error","close","stopNotifications","removeEventListener","disconnect","write","data","writeValue","_bufferToArrayBuffer","emit","event","dataView","target","value","buffer","Buffer","from","byteOffset","byteLength","slice","module","exports"],"sources":["D:/code projects/iaq-dashboard/node_modules/modbus-serial/ports/bleport.js"],"sourcesContent":["/* globals navigator */\n\n\"use strict\";\n\nconst { EventEmitter } = require(\"events\");\nconst debug = require(\"debug\")(\"modbus-serial\");\n\n/**\n * Bluetooth Low Energy port for Modbus.\n */\nclass BlePort extends EventEmitter {\n    constructor(options) {\n        super();\n\n        if (typeof(options) === \"undefined\") options = {};\n\n        this._bluetooth = options.bluetooth || navigator.bluetooth;\n        this._txServiceUuid = options.txService;\n        this._txCharacteristicUuid = options.txCharacteristic;\n        this._rxServiceUuid = options.rxService;\n        this._rxCharacteristicUuid = options.rxCharacteristic;\n\n        this._boundHandleDisconnection = this._handleDisconnection.bind(this);\n        this._boundHandleCharacteristicValueChanged = this._handleCharacteristicValueChanged.bind(this);\n    }\n\n    get isOpen() {\n        return Boolean(this._device) && this._device.gatt.connected;\n    }\n\n    async open(callback) {\n        let error;\n        try {\n            const options = {\n                filters: [{ services: [this._txServiceUuid] }],\n                optionalServices: [this._txServiceUuid, this._rxServiceUuid]\n            };\n            debug({ action: \"requesting BLE device\", options });\n            this._device = await this._bluetooth.requestDevice(options);\n            debug({ action: \"BLE device connected\", name: this._device.name, id: this._device.id });\n\n            this._device.addEventListener(\"gattserverdisconnected\", this._boundHandleDisconnection);\n\n            debug({ action: \"Connecting to GATT server\" });\n            this._server = await this._device.gatt.connect();\n            debug({ action: \"GATT server connected\" });\n\n            debug({ action: \"Getting TX service\", uuid: this._txServiceUuid });\n            this._txService = await this._server.getPrimaryService(this._txServiceUuid);\n            debug({ action: \"TX service found\" });\n\n            debug({ action: \"Getting TX characteristic\", uuid: this._txCharacteristicUuid });\n            this._txCharacteristic = await this._txService.getCharacteristic(this._txCharacteristicUuid);\n            debug({ action: \"TX characteristic found\" });\n\n            debug({ action: \"Getting RX service\", uuid: this._rxServiceUuid });\n            this._rxService = await this._server.getPrimaryService(this._rxServiceUuid);\n            debug({ action: \"RX service found\" });\n\n            debug({ action: \"Getting RX characteristic\", uuid: this._rxCharacteristicUuid });\n            this._rxCharacteristic = await this._rxService.getCharacteristic(this._rxCharacteristicUuid);\n            debug({ action: \"RX characteristic found\" });\n\n            debug({ action: \"Starting RX notifications\" });\n            await this._rxCharacteristic.startNotifications();\n            debug({ action: \"RX notifications started\" });\n\n            this._rxCharacteristic.addEventListener(\"characteristicvaluechanged\", this._boundHandleCharacteristicValueChanged);\n        } catch (_error) {\n            error = _error;\n        }\n\n        if (callback) {\n            callback(error);\n        }\n    }\n\n    async close(callback) {\n        let error;\n        try {\n            if (this._rxCharacteristic) {\n                debug({ action: \"Stopping RX notifications\" });\n                await this._rxCharacteristic.stopNotifications();\n                debug({ action: \"RX notifications stopped\" });\n\n                this._rxCharacteristic.removeEventListener(\"characteristicvaluechanged\", this._boundHandleCharacteristicValueChanged);\n            }\n\n            if (this._device) {\n                debug({ action: \"Disconnecting from GATT server\" });\n\n                this._device.removeEventListener(\"gattserverdisconnected\", this._boundHandleDisconnection);\n\n                if (this._device.gatt.connected) {\n                    this._device.gatt.disconnect();\n                    debug({ action: \"GATT server disconnected\" });\n                } else {\n                    debug({ action: \"GATT server is already disconnected\" });\n                }\n            }\n        } catch (_error) {\n            error = _error;\n        }\n\n        if (callback) {\n            callback(error);\n        }\n    }\n\n    /**\n     * Writes raw data to the TX characteristic.\n     * @param {Buffer} data\n     * @returns {Promise}\n     */\n    async write(data) {\n        debug({ action: \"Writing to TX characteristic\", data });\n        await this._txCharacteristic.writeValue(BlePort._bufferToArrayBuffer(data));\n    }\n\n    _handleDisconnection() {\n        debug({ action: \"GATT server disconnected\" });\n        this.emit(\"close\");\n    }\n\n    /**\n     * Handles a received GATT value change event.\n     * @param event\n     * @private\n     */\n    _handleCharacteristicValueChanged(event) {\n        const dataView = event.target.value;\n        const buffer = Buffer.from(dataView.buffer, dataView.byteOffset, dataView.byteLength);\n        debug({ action: \"RX characteristic changed\", buffer });\n        this.emit(\"data\", buffer);\n    }\n\n    /**\n     * Converts a Node.js `Buffer` to an `ArrayBuffer`.\n     * @param {Buffer} buffer\n     * @returns {ArrayBuffer}\n     * @private\n     */\n    static _bufferToArrayBuffer(buffer) {\n        return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n    }\n}\n\nmodule.exports = BlePort;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}