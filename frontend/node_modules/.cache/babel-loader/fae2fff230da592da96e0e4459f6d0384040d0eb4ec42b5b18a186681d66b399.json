{"ast":null,"code":"// Enhanced Constants for IAQ Dashboard\n// /frontend/src/utils/constants.js\n\nexport const SENSOR_TYPES = {\n  PM25: 'PM2.5',\n  CO2: 'CO2',\n  TEMPERATURE: 'Temperature',\n  HUMIDITY: 'Humidity',\n  TVOC: 'TVOC',\n  DIFFERENTIAL_PRESSURE: 'Differential Pressure'\n};\n\n// Enhanced sensor ranges with status thresholds\nexport const SENSOR_RANGES = {\n  PM25: {\n    min: 0,\n    max: 50,\n    unit: 'µg/m³',\n    good: {\n      min: 0,\n      max: 15\n    },\n    warning: {\n      min: 15,\n      max: 30\n    },\n    danger: {\n      min: 30,\n      max: 50\n    },\n    decimals: 1\n  },\n  CO2: {\n    min: 0,\n    max: 5000,\n    unit: 'ppm',\n    good: {\n      min: 0,\n      max: 1200\n    },\n    warning: {\n      min: 1200,\n      max: 2000\n    },\n    danger: {\n      min: 2000,\n      max: 5000\n    },\n    decimals: 0\n  },\n  TEMPERATURE: {\n    min: -10,\n    max: 50,\n    unit: '°C',\n    good: {\n      min: 20,\n      max: 28\n    },\n    warning: {\n      min: 15,\n      max: 32\n    },\n    danger: {\n      min: -10,\n      max: 50\n    },\n    decimals: 1\n  },\n  HUMIDITY: {\n    min: 0,\n    max: 100,\n    unit: '%',\n    good: {\n      min: 40,\n      max: 60\n    },\n    warning: {\n      min: 30,\n      max: 70\n    },\n    danger: {\n      min: 0,\n      max: 100\n    },\n    decimals: 1\n  },\n  TVOC: {\n    min: 0,\n    max: 5,\n    unit: 'mg/m³',\n    good: {\n      min: 0,\n      max: 0.3\n    },\n    warning: {\n      min: 0.3,\n      max: 3\n    },\n    danger: {\n      min: 3,\n      max: 10\n    },\n    decimals: 2\n  },\n  DIFFERENTIAL_PRESSURE: {\n    min: -3,\n    max: 5,\n    unit: 'Pa',\n    good: {\n      min: 0.1,\n      max: 5\n    },\n    warning: {\n      min: -1,\n      max: 0\n    },\n    danger: {\n      min: -3,\n      max: -1\n    },\n    decimals: 2\n  }\n};\n\n// IAQ Index calculation ranges\nexport const IAQ_LEVELS = {\n  EXCELLENT: {\n    min: 80,\n    max: 100,\n    color: '#10B981',\n    bgColor: 'from-green-500 to-green-600',\n    textColor: 'text-green-400',\n    label: 'Excellent',\n    icon: '😊',\n    description: 'Outstanding air quality'\n  },\n  GOOD: {\n    min: 60,\n    max: 79,\n    color: '#3B82F6',\n    bgColor: 'from-blue-500 to-blue-600',\n    textColor: 'text-blue-400',\n    label: 'Good',\n    icon: '🙂',\n    description: 'Good air quality'\n  },\n  MODERATE: {\n    min: 40,\n    max: 59,\n    color: '#F59E0B',\n    bgColor: 'from-yellow-500 to-yellow-600',\n    textColor: 'text-yellow-400',\n    label: 'Moderate',\n    icon: '😐',\n    description: 'Acceptable air quality'\n  },\n  POOR: {\n    min: 20,\n    max: 39,\n    color: '#F97316',\n    bgColor: 'from-orange-500 to-orange-600',\n    textColor: 'text-orange-400',\n    label: 'Poor',\n    icon: '😷',\n    description: 'Poor air quality'\n  },\n  CRITICAL: {\n    min: 0,\n    max: 19,\n    color: '#EF4444',\n    bgColor: 'from-red-500 to-red-600',\n    textColor: 'text-red-400',\n    label: 'Critical',\n    icon: '🚨',\n    description: 'Critical air quality'\n  }\n};\n\n// Status colors for indicators\nexport const STATUS_COLORS = {\n  GOOD: {\n    color: '#10B981',\n    bgColor: 'bg-green-500',\n    textColor: 'text-green-400',\n    shadowColor: '0 0 15px rgba(16, 185, 129, 0.5)'\n  },\n  WARNING: {\n    color: '#F59E0B',\n    bgColor: 'bg-yellow-500',\n    textColor: 'text-yellow-400',\n    shadowColor: '0 0 15px rgba(245, 158, 11, 0.5)'\n  },\n  DANGER: {\n    color: '#EF4444',\n    bgColor: 'bg-red-500',\n    textColor: 'text-red-400',\n    shadowColor: '0 0 15px rgba(239, 68, 68, 0.5)'\n  }\n};\n\n// Weather configuration\nexport const WEATHER_CONFIG = {\n  location: 'Pathumwan, Bangkok',\n  defaultTemperature: 31.39,\n  defaultHumidity: 64.31,\n  defaultCondition: 'Sunny'\n};\n\n// IAQ calculation weights for different sensors\nexport const IAQ_WEIGHTS = {\n  PM25: 0.25,\n  CO2: 0.25,\n  TVOC: 0.20,\n  HUMIDITY: 0.15,\n  TEMPERATURE: 0.15\n};\n\n// Helper function to get status based on sensor value\nexport const getSensorStatus = (sensorType, value) => {\n  var _range$warning, _range$warning2, _range$warning3, _range$warning4;\n  const range = SENSOR_RANGES[sensorType];\n  if (!range) return STATUS_COLORS.GOOD;\n  if (value >= range.good.min && value <= range.good.max) {\n    return STATUS_COLORS.GOOD;\n  } else if (value >= (((_range$warning = range.warning) === null || _range$warning === void 0 ? void 0 : _range$warning.min) || range.good.min - 10) && value <= (((_range$warning2 = range.warning) === null || _range$warning2 === void 0 ? void 0 : _range$warning2.max) || range.good.max + 10) || value < range.good.min && value >= (((_range$warning3 = range.warning) === null || _range$warning3 === void 0 ? void 0 : _range$warning3.min) || range.good.min - 10) || value > range.good.max && value <= (((_range$warning4 = range.warning) === null || _range$warning4 === void 0 ? void 0 : _range$warning4.max) || range.good.max + 10)) {\n    return STATUS_COLORS.WARNING;\n  } else {\n    return STATUS_COLORS.DANGER;\n  }\n};\n\n// Helper function to calculate IAQ index\nexport const calculateIAQ = sensorData => {\n  if (!sensorData) return 86; // Default value\n\n  let totalScore = 0;\n  let totalWeight = 0;\n  Object.entries(IAQ_WEIGHTS).forEach(([sensor, weight]) => {\n    const value = sensorData[sensor];\n    const range = SENSOR_RANGES[sensor];\n    if (value !== undefined && range) {\n      // Normalize value to 0-100 score\n      let score;\n      const goodRange = range.good;\n      if (value >= goodRange.min && value <= goodRange.max) {\n        score = 100; // Perfect score in good range\n      } else {\n        // Calculate distance from good range\n        const distanceFromGood = Math.min(Math.abs(value - goodRange.min), Math.abs(value - goodRange.max));\n        const maxDistance = Math.max(goodRange.min - range.min, range.max - goodRange.max);\n        score = Math.max(0, 100 - distanceFromGood / maxDistance * 100);\n      }\n      totalScore += score * weight;\n      totalWeight += weight;\n    }\n  });\n  return totalWeight > 0 ? Math.round(totalScore / totalWeight) : 86;\n};\n\n// Helper function to get IAQ status\nexport const getIAQStatus = iaqValue => {\n  for (const [key, level] of Object.entries(IAQ_LEVELS)) {\n    if (iaqValue >= level.min && iaqValue <= level.max) {\n      return level;\n    }\n  }\n  return IAQ_LEVELS.MODERATE; // Default fallback\n};","map":{"version":3,"names":["SENSOR_TYPES","PM25","CO2","TEMPERATURE","HUMIDITY","TVOC","DIFFERENTIAL_PRESSURE","SENSOR_RANGES","min","max","unit","good","warning","danger","decimals","IAQ_LEVELS","EXCELLENT","color","bgColor","textColor","label","icon","description","GOOD","MODERATE","POOR","CRITICAL","STATUS_COLORS","shadowColor","WARNING","DANGER","WEATHER_CONFIG","location","defaultTemperature","defaultHumidity","defaultCondition","IAQ_WEIGHTS","getSensorStatus","sensorType","value","_range$warning","_range$warning2","_range$warning3","_range$warning4","range","calculateIAQ","sensorData","totalScore","totalWeight","Object","entries","forEach","sensor","weight","undefined","score","goodRange","distanceFromGood","Math","abs","maxDistance","round","getIAQStatus","iaqValue","key","level"],"sources":["/home/innovation/var/iaq-dashboard-project/frontend/src/utils/constants.js"],"sourcesContent":["// Enhanced Constants for IAQ Dashboard\n// /frontend/src/utils/constants.js\n\nexport const SENSOR_TYPES = {\n  PM25: 'PM2.5',\n  CO2: 'CO2',\n  TEMPERATURE: 'Temperature',\n  HUMIDITY: 'Humidity',\n  TVOC: 'TVOC',\n  DIFFERENTIAL_PRESSURE: 'Differential Pressure'\n};\n\n\n// Enhanced sensor ranges with status thresholds\nexport const SENSOR_RANGES = {\n  PM25: { \n    min: 0, \n    max: 50, \n    unit: 'µg/m³', \n    good: { min: 0, max: 15 },\n    warning: { min: 15, max: 30 },\n    danger: { min: 30, max: 50 },\n    decimals: 1\n  },\n  CO2: { \n    min: 0, \n    max: 5000, \n    unit: 'ppm', \n    good: { min: 0, max: 1200 },\n    warning: { min: 1200, max: 2000 },\n    danger: { min: 2000, max: 5000 },\n    decimals: 0\n  },\n  TEMPERATURE: { \n    min: -10, \n    max: 50, \n    unit: '°C', \n    good: { min: 20, max: 28 },\n    warning: { min: 15, max: 32 },\n    danger: { min: -10, max: 50 },\n    decimals: 1\n  },\n  HUMIDITY: { \n    min: 0, \n    max: 100, \n    unit: '%', \n    good: { min: 40, max: 60 },\n    warning: { min: 30, max: 70 },\n    danger: { min: 0, max: 100 },\n    decimals: 1\n  },\n  TVOC: { \n    min: 0, \n    max: 5, \n    unit: 'mg/m³', \n    good: { min: 0, max: 0.3 },\n    warning: { min: 0.3, max: 3 },\n    danger: { min: 3, max: 10 },\n    decimals: 2\n  },\n  DIFFERENTIAL_PRESSURE: { \n    min: -3, \n    max: 5, \n    unit: 'Pa',\n    good: { min: 0.1, max: 5 },\n    warning: { min: -1, max: 0 },\n    danger: { min: -3, max: -1 },\n    decimals: 2\n  }\n};\n\n// IAQ Index calculation ranges\nexport const IAQ_LEVELS = {\n  EXCELLENT: { \n    min: 80, \n    max: 100, \n    color: '#10B981', \n    bgColor: 'from-green-500 to-green-600',\n    textColor: 'text-green-400',\n    label: 'Excellent',\n    icon: '😊',\n    description: 'Outstanding air quality'\n  },\n  GOOD: { \n    min: 60, \n    max: 79, \n    color: '#3B82F6', \n    bgColor: 'from-blue-500 to-blue-600',\n    textColor: 'text-blue-400',\n    label: 'Good',\n    icon: '🙂',\n    description: 'Good air quality'\n  },\n  MODERATE: { \n    min: 40, \n    max: 59, \n    color: '#F59E0B', \n    bgColor: 'from-yellow-500 to-yellow-600',\n    textColor: 'text-yellow-400',\n    label: 'Moderate',\n    icon: '😐',\n    description: 'Acceptable air quality'\n  },\n  POOR: { \n    min: 20, \n    max: 39, \n    color: '#F97316', \n    bgColor: 'from-orange-500 to-orange-600',\n    textColor: 'text-orange-400',\n    label: 'Poor',\n    icon: '😷',\n    description: 'Poor air quality'\n  },\n  CRITICAL: { \n    min: 0, \n    max: 19, \n    color: '#EF4444', \n    bgColor: 'from-red-500 to-red-600',\n    textColor: 'text-red-400',\n    label: 'Critical',\n    icon: '🚨',\n    description: 'Critical air quality'\n  }\n};\n\n// Status colors for indicators\nexport const STATUS_COLORS = {\n  GOOD: {\n    color: '#10B981',\n    bgColor: 'bg-green-500',\n    textColor: 'text-green-400',\n    shadowColor: '0 0 15px rgba(16, 185, 129, 0.5)'\n  },\n  WARNING: {\n    color: '#F59E0B',\n    bgColor: 'bg-yellow-500',\n    textColor: 'text-yellow-400',\n    shadowColor: '0 0 15px rgba(245, 158, 11, 0.5)'\n  },\n  DANGER: {\n    color: '#EF4444',\n    bgColor: 'bg-red-500',\n    textColor: 'text-red-400',\n    shadowColor: '0 0 15px rgba(239, 68, 68, 0.5)'\n  }\n};\n\n// Weather configuration\nexport const WEATHER_CONFIG = {\n  location: 'Pathumwan, Bangkok',\n  defaultTemperature: 31.39,\n  defaultHumidity: 64.31,\n  defaultCondition: 'Sunny'\n};\n\n// IAQ calculation weights for different sensors\nexport const IAQ_WEIGHTS = {\n  PM25: 0.25,\n  CO2: 0.25,\n  TVOC: 0.20,\n  HUMIDITY: 0.15,\n  TEMPERATURE: 0.15\n};\n\n// Helper function to get status based on sensor value\nexport const getSensorStatus = (sensorType, value) => {\n  const range = SENSOR_RANGES[sensorType];\n  if (!range) return STATUS_COLORS.GOOD;\n  \n  if (value >= range.good.min && value <= range.good.max) {\n    return STATUS_COLORS.GOOD;\n  } else if (\n    (value >= (range.warning?.min || range.good.min - 10) && value <= (range.warning?.max || range.good.max + 10)) ||\n    (value < range.good.min && value >= (range.warning?.min || range.good.min - 10)) ||\n    (value > range.good.max && value <= (range.warning?.max || range.good.max + 10))\n  ) {\n    return STATUS_COLORS.WARNING;\n  } else {\n    return STATUS_COLORS.DANGER;\n  }\n};\n\n// Helper function to calculate IAQ index\nexport const calculateIAQ = (sensorData) => {\n  if (!sensorData) return 86; // Default value\n  \n  let totalScore = 0;\n  let totalWeight = 0;\n\n  Object.entries(IAQ_WEIGHTS).forEach(([sensor, weight]) => {\n    const value = sensorData[sensor];\n    const range = SENSOR_RANGES[sensor];\n    \n    if (value !== undefined && range) {\n      // Normalize value to 0-100 score\n      let score;\n      const goodRange = range.good;\n      \n      if (value >= goodRange.min && value <= goodRange.max) {\n        score = 100; // Perfect score in good range\n      } else {\n        // Calculate distance from good range\n        const distanceFromGood = Math.min(\n          Math.abs(value - goodRange.min),\n          Math.abs(value - goodRange.max)\n        );\n        const maxDistance = Math.max(\n          goodRange.min - range.min,\n          range.max - goodRange.max\n        );\n        score = Math.max(0, 100 - (distanceFromGood / maxDistance) * 100);\n      }\n      \n      totalScore += score * weight;\n      totalWeight += weight;\n    }\n  });\n\n  return totalWeight > 0 ? Math.round(totalScore / totalWeight) : 86;\n};\n\n// Helper function to get IAQ status\nexport const getIAQStatus = (iaqValue) => {\n  for (const [key, level] of Object.entries(IAQ_LEVELS)) {\n    if (iaqValue >= level.min && iaqValue <= level.max) {\n      return level;\n    }\n  }\n  return IAQ_LEVELS.MODERATE; // Default fallback\n};\n"],"mappings":"AAAA;AACA;;AAEA,OAAO,MAAMA,YAAY,GAAG;EAC1BC,IAAI,EAAE,OAAO;EACbC,GAAG,EAAE,KAAK;EACVC,WAAW,EAAE,aAAa;EAC1BC,QAAQ,EAAE,UAAU;EACpBC,IAAI,EAAE,MAAM;EACZC,qBAAqB,EAAE;AACzB,CAAC;;AAGD;AACA,OAAO,MAAMC,aAAa,GAAG;EAC3BN,IAAI,EAAE;IACJO,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE,EAAE;IACPC,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE;MAAEH,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE;IAAG,CAAC;IACzBG,OAAO,EAAE;MAAEJ,GAAG,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAG,CAAC;IAC7BI,MAAM,EAAE;MAAEL,GAAG,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAG,CAAC;IAC5BK,QAAQ,EAAE;EACZ,CAAC;EACDZ,GAAG,EAAE;IACHM,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE,IAAI;IACTC,IAAI,EAAE,KAAK;IACXC,IAAI,EAAE;MAAEH,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE;IAAK,CAAC;IAC3BG,OAAO,EAAE;MAAEJ,GAAG,EAAE,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC;IACjCI,MAAM,EAAE;MAAEL,GAAG,EAAE,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC;IAChCK,QAAQ,EAAE;EACZ,CAAC;EACDX,WAAW,EAAE;IACXK,GAAG,EAAE,CAAC,EAAE;IACRC,GAAG,EAAE,EAAE;IACPC,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE;MAAEH,GAAG,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAG,CAAC;IAC1BG,OAAO,EAAE;MAAEJ,GAAG,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAG,CAAC;IAC7BI,MAAM,EAAE;MAAEL,GAAG,EAAE,CAAC,EAAE;MAAEC,GAAG,EAAE;IAAG,CAAC;IAC7BK,QAAQ,EAAE;EACZ,CAAC;EACDV,QAAQ,EAAE;IACRI,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE,GAAG;IACRC,IAAI,EAAE,GAAG;IACTC,IAAI,EAAE;MAAEH,GAAG,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAG,CAAC;IAC1BG,OAAO,EAAE;MAAEJ,GAAG,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAG,CAAC;IAC7BI,MAAM,EAAE;MAAEL,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE;IAAI,CAAC;IAC5BK,QAAQ,EAAE;EACZ,CAAC;EACDT,IAAI,EAAE;IACJG,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE,CAAC;IACNC,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE;MAAEH,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE;IAAI,CAAC;IAC1BG,OAAO,EAAE;MAAEJ,GAAG,EAAE,GAAG;MAAEC,GAAG,EAAE;IAAE,CAAC;IAC7BI,MAAM,EAAE;MAAEL,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE;IAAG,CAAC;IAC3BK,QAAQ,EAAE;EACZ,CAAC;EACDR,qBAAqB,EAAE;IACrBE,GAAG,EAAE,CAAC,CAAC;IACPC,GAAG,EAAE,CAAC;IACNC,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE;MAAEH,GAAG,EAAE,GAAG;MAAEC,GAAG,EAAE;IAAE,CAAC;IAC1BG,OAAO,EAAE;MAAEJ,GAAG,EAAE,CAAC,CAAC;MAAEC,GAAG,EAAE;IAAE,CAAC;IAC5BI,MAAM,EAAE;MAAEL,GAAG,EAAE,CAAC,CAAC;MAAEC,GAAG,EAAE,CAAC;IAAE,CAAC;IAC5BK,QAAQ,EAAE;EACZ;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG;EACxBC,SAAS,EAAE;IACTR,GAAG,EAAE,EAAE;IACPC,GAAG,EAAE,GAAG;IACRQ,KAAK,EAAE,SAAS;IAChBC,OAAO,EAAE,6BAA6B;IACtCC,SAAS,EAAE,gBAAgB;IAC3BC,KAAK,EAAE,WAAW;IAClBC,IAAI,EAAE,IAAI;IACVC,WAAW,EAAE;EACf,CAAC;EACDC,IAAI,EAAE;IACJf,GAAG,EAAE,EAAE;IACPC,GAAG,EAAE,EAAE;IACPQ,KAAK,EAAE,SAAS;IAChBC,OAAO,EAAE,2BAA2B;IACpCC,SAAS,EAAE,eAAe;IAC1BC,KAAK,EAAE,MAAM;IACbC,IAAI,EAAE,IAAI;IACVC,WAAW,EAAE;EACf,CAAC;EACDE,QAAQ,EAAE;IACRhB,GAAG,EAAE,EAAE;IACPC,GAAG,EAAE,EAAE;IACPQ,KAAK,EAAE,SAAS;IAChBC,OAAO,EAAE,+BAA+B;IACxCC,SAAS,EAAE,iBAAiB;IAC5BC,KAAK,EAAE,UAAU;IACjBC,IAAI,EAAE,IAAI;IACVC,WAAW,EAAE;EACf,CAAC;EACDG,IAAI,EAAE;IACJjB,GAAG,EAAE,EAAE;IACPC,GAAG,EAAE,EAAE;IACPQ,KAAK,EAAE,SAAS;IAChBC,OAAO,EAAE,+BAA+B;IACxCC,SAAS,EAAE,iBAAiB;IAC5BC,KAAK,EAAE,MAAM;IACbC,IAAI,EAAE,IAAI;IACVC,WAAW,EAAE;EACf,CAAC;EACDI,QAAQ,EAAE;IACRlB,GAAG,EAAE,CAAC;IACNC,GAAG,EAAE,EAAE;IACPQ,KAAK,EAAE,SAAS;IAChBC,OAAO,EAAE,yBAAyB;IAClCC,SAAS,EAAE,cAAc;IACzBC,KAAK,EAAE,UAAU;IACjBC,IAAI,EAAE,IAAI;IACVC,WAAW,EAAE;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,aAAa,GAAG;EAC3BJ,IAAI,EAAE;IACJN,KAAK,EAAE,SAAS;IAChBC,OAAO,EAAE,cAAc;IACvBC,SAAS,EAAE,gBAAgB;IAC3BS,WAAW,EAAE;EACf,CAAC;EACDC,OAAO,EAAE;IACPZ,KAAK,EAAE,SAAS;IAChBC,OAAO,EAAE,eAAe;IACxBC,SAAS,EAAE,iBAAiB;IAC5BS,WAAW,EAAE;EACf,CAAC;EACDE,MAAM,EAAE;IACNb,KAAK,EAAE,SAAS;IAChBC,OAAO,EAAE,YAAY;IACrBC,SAAS,EAAE,cAAc;IACzBS,WAAW,EAAE;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,cAAc,GAAG;EAC5BC,QAAQ,EAAE,oBAAoB;EAC9BC,kBAAkB,EAAE,KAAK;EACzBC,eAAe,EAAE,KAAK;EACtBC,gBAAgB,EAAE;AACpB,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG;EACzBnC,IAAI,EAAE,IAAI;EACVC,GAAG,EAAE,IAAI;EACTG,IAAI,EAAE,IAAI;EACVD,QAAQ,EAAE,IAAI;EACdD,WAAW,EAAE;AACf,CAAC;;AAED;AACA,OAAO,MAAMkC,eAAe,GAAGA,CAACC,UAAU,EAAEC,KAAK,KAAK;EAAA,IAAAC,cAAA,EAAAC,eAAA,EAAAC,eAAA,EAAAC,eAAA;EACpD,MAAMC,KAAK,GAAGrC,aAAa,CAAC+B,UAAU,CAAC;EACvC,IAAI,CAACM,KAAK,EAAE,OAAOjB,aAAa,CAACJ,IAAI;EAErC,IAAIgB,KAAK,IAAIK,KAAK,CAACjC,IAAI,CAACH,GAAG,IAAI+B,KAAK,IAAIK,KAAK,CAACjC,IAAI,CAACF,GAAG,EAAE;IACtD,OAAOkB,aAAa,CAACJ,IAAI;EAC3B,CAAC,MAAM,IACJgB,KAAK,KAAK,EAAAC,cAAA,GAAAI,KAAK,CAAChC,OAAO,cAAA4B,cAAA,uBAAbA,cAAA,CAAehC,GAAG,KAAIoC,KAAK,CAACjC,IAAI,CAACH,GAAG,GAAG,EAAE,CAAC,IAAI+B,KAAK,KAAK,EAAAE,eAAA,GAAAG,KAAK,CAAChC,OAAO,cAAA6B,eAAA,uBAAbA,eAAA,CAAehC,GAAG,KAAImC,KAAK,CAACjC,IAAI,CAACF,GAAG,GAAG,EAAE,CAAC,IAC5G8B,KAAK,GAAGK,KAAK,CAACjC,IAAI,CAACH,GAAG,IAAI+B,KAAK,KAAK,EAAAG,eAAA,GAAAE,KAAK,CAAChC,OAAO,cAAA8B,eAAA,uBAAbA,eAAA,CAAelC,GAAG,KAAIoC,KAAK,CAACjC,IAAI,CAACH,GAAG,GAAG,EAAE,CAAE,IAC/E+B,KAAK,GAAGK,KAAK,CAACjC,IAAI,CAACF,GAAG,IAAI8B,KAAK,KAAK,EAAAI,eAAA,GAAAC,KAAK,CAAChC,OAAO,cAAA+B,eAAA,uBAAbA,eAAA,CAAelC,GAAG,KAAImC,KAAK,CAACjC,IAAI,CAACF,GAAG,GAAG,EAAE,CAAE,EAChF;IACA,OAAOkB,aAAa,CAACE,OAAO;EAC9B,CAAC,MAAM;IACL,OAAOF,aAAa,CAACG,MAAM;EAC7B;AACF,CAAC;;AAED;AACA,OAAO,MAAMe,YAAY,GAAIC,UAAU,IAAK;EAC1C,IAAI,CAACA,UAAU,EAAE,OAAO,EAAE,CAAC,CAAC;;EAE5B,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,WAAW,GAAG,CAAC;EAEnBC,MAAM,CAACC,OAAO,CAACd,WAAW,CAAC,CAACe,OAAO,CAAC,CAAC,CAACC,MAAM,EAAEC,MAAM,CAAC,KAAK;IACxD,MAAMd,KAAK,GAAGO,UAAU,CAACM,MAAM,CAAC;IAChC,MAAMR,KAAK,GAAGrC,aAAa,CAAC6C,MAAM,CAAC;IAEnC,IAAIb,KAAK,KAAKe,SAAS,IAAIV,KAAK,EAAE;MAChC;MACA,IAAIW,KAAK;MACT,MAAMC,SAAS,GAAGZ,KAAK,CAACjC,IAAI;MAE5B,IAAI4B,KAAK,IAAIiB,SAAS,CAAChD,GAAG,IAAI+B,KAAK,IAAIiB,SAAS,CAAC/C,GAAG,EAAE;QACpD8C,KAAK,GAAG,GAAG,CAAC,CAAC;MACf,CAAC,MAAM;QACL;QACA,MAAME,gBAAgB,GAAGC,IAAI,CAAClD,GAAG,CAC/BkD,IAAI,CAACC,GAAG,CAACpB,KAAK,GAAGiB,SAAS,CAAChD,GAAG,CAAC,EAC/BkD,IAAI,CAACC,GAAG,CAACpB,KAAK,GAAGiB,SAAS,CAAC/C,GAAG,CAChC,CAAC;QACD,MAAMmD,WAAW,GAAGF,IAAI,CAACjD,GAAG,CAC1B+C,SAAS,CAAChD,GAAG,GAAGoC,KAAK,CAACpC,GAAG,EACzBoC,KAAK,CAACnC,GAAG,GAAG+C,SAAS,CAAC/C,GACxB,CAAC;QACD8C,KAAK,GAAGG,IAAI,CAACjD,GAAG,CAAC,CAAC,EAAE,GAAG,GAAIgD,gBAAgB,GAAGG,WAAW,GAAI,GAAG,CAAC;MACnE;MAEAb,UAAU,IAAIQ,KAAK,GAAGF,MAAM;MAC5BL,WAAW,IAAIK,MAAM;IACvB;EACF,CAAC,CAAC;EAEF,OAAOL,WAAW,GAAG,CAAC,GAAGU,IAAI,CAACG,KAAK,CAACd,UAAU,GAAGC,WAAW,CAAC,GAAG,EAAE;AACpE,CAAC;;AAED;AACA,OAAO,MAAMc,YAAY,GAAIC,QAAQ,IAAK;EACxC,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIhB,MAAM,CAACC,OAAO,CAACnC,UAAU,CAAC,EAAE;IACrD,IAAIgD,QAAQ,IAAIE,KAAK,CAACzD,GAAG,IAAIuD,QAAQ,IAAIE,KAAK,CAACxD,GAAG,EAAE;MAClD,OAAOwD,KAAK;IACd;EACF;EACA,OAAOlD,UAAU,CAACS,QAAQ,CAAC,CAAC;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}